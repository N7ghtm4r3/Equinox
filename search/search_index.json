{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview","title":"Overview","text":"<p>Framework for integrating Spring Boot backends with Compose Multiplatform applications</p>"},{"location":"#modules","title":"Modules","text":"Module Description Purpose Version equinox-backend Utilities for Spring-based backend Backend services, API logic, database interaction equinox-core Core utilities for CMP and Spring technologies Cross-platform functionality (Android, Desktop, iOS, Web and Spring) equinox-compose Utilities for Compose Multiplatform Project Components, utilities, APIs for Android, Desktop, iOS and Web platforms equinox-miscellaneous Miscellaneous of integrations or extensions of external libraries Integrate or extend external libraries according to the Equinox architecture N/A equinox-navigation Utilities to handle the navigation in a Compose Multiplatform application Responsive navigation systems based on the EquinoxScreens APIs"},{"location":"#support","title":"Support","text":"<p>If you need help using the library or encounter any problems or bugs, please contact us via the following links:</p> <ul> <li>Support via email</li> <li>Support via GitHub</li> </ul> <p>Thank you for your help!</p>"},{"location":"#donations","title":"Donations","text":"<p>If you want support project and developer</p> Crypto Address Network 3H3jyCzcRmnxroHthuXh22GXXSmizin2yp Bitcoin 0x1b45bc41efeb3ed655b078f95086f25fc83345c4 Ethereum AtPjUnxYFHw3a6Si9HinQtyPTqsdbfdKX3dJ1xiDjbrL Solana <p>If you want support project and developer with PayPal</p>"},{"location":"backend/","title":"Overview","text":""},{"location":"backend/#overview","title":"Overview","text":"<p>v1.1.6</p> <p>Utilities and apis for the backends based on the Spring Boot framework</p>"},{"location":"backend/#implementation","title":"Implementation","text":""},{"location":"backend/#version-catalog","title":"Version catalog","text":"<pre><code>[versions]\nequinox-backend = \"1.1.6\"\nequinox = \"1.1.7\"\n\n[libraries]\nequinox-backend = { module = \"io.github.n7ghtm4r3:equinox-backend\", version.ref = \"equinox-backend\" }\nequinox-core = { module = \"io.github.n7ghtm4r3:equinox-core\", version.ref = \"equinox\" }\n</code></pre>"},{"location":"backend/#gradle","title":"Gradle","text":"<p>Add the JitPack repository to your build file</p> <ul> <li> <p>Add it in your root build.gradle at the end of repositories</p> <pre><code>repositories {\n    ...\n    maven { url 'https://jitpack.io' }\n}\n</code></pre> <p></p> Gradle (Kotlin) <p></p> <pre><code>repositories {\n    ...\n    maven(\"https://jitpack.io\")\n}\n</code></pre> </li> <li> <p>Add the dependency</p> <pre><code>dependencies {\n\n    // implement the backend utilities\n    implementation 'io.github.n7ghtm4r3:equinox-backend:1.1.6'\n\n    // implement the core utilities\n    implementation 'io.github.n7ghtm4r3:equinox-core:1.1.7'\n}\n</code></pre> <p></p> Gradle (Kotlin) <p></p> <pre><code>dependencies {\n\n    // implement the backend utilities\n    implementation(\"io.github.n7ghtm4r3:equinox-backend:1.1.6\")\n\n    // implement the core utilities\n    implementation(\"io.github.n7ghtm4r3:equinox-core:1.1.7\")\n}\n</code></pre> <p></p> Gradle (version catalog) <p></p> <pre><code>dependencies {\n\n    // implement the backend utilities\n    implementation(libs.equinox.backend)\n\n    // implement the core utilities\n    implementation(libs.equinox.core)\n}\n</code></pre> </li> </ul>"},{"location":"backend/#apis-available","title":"APIs available","text":"Batch <ul> <li> <p>EquinoxItemsHelper     Executes batch database operations such as insertion, deletion, and synchronization</p> </li> <li> <p>BatchSynchronizationProcedure     Defines reusable and compacted synchronization procedures</p> </li> </ul> Database <ul> <li> <p>IndexesCreator     Automatically creates indexes for custom database tables</p> </li> <li> <p>FilteredQuery     Builds dynamic queries with filter parameters leverages regex expressions</p> </li> <li> <p>SQLConstants     Collection of constants used in the SQL context</p> </li> </ul> Miscellaneous <ul> <li> <p>ResourcesProvider    Manages static resources to serve to client applications</p> </li> <li> <p>EquinoxEvents    Facilitates event sharing and collection between backend services</p> </li> </ul>"},{"location":"backend/#basic-environment-available","title":"Basic environment available","text":"<p>Equinox gives a basic out-of-the-box environment to directly create a SpringApplication following the Equinox implementation philosophy to automatically manage some recurring operations such the users related requests or the inputs validation. You can take a look here to check how it works and how to implement it on your own backend</p>"},{"location":"backend/#configure-your-backend","title":"Configure your backend","text":"<p>To configure your backend as you need you can follow this guide to directly copy the <code>@Component</code> classes you need and implement them in your backend instance, personal advice is put them in a folder named <code>configuration</code> for clean implementation and better readability as follows:</p> <pre><code>com.your.package\n\u2514\u2500\u2500 configuration\n   \u2514\u2500\u2500 config_class\n   \u2514\u2500\u2500 config_class\n   \u2514\u2500\u2500 config_class\n   \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"backend/#annotations-available","title":"Annotations available","text":"<p>This module provides a set of annotations that can be used to improve code readability and maintainability. You can explore them here</p>"},{"location":"backend/Configurations/","title":"Configurations","text":"<p>In this page you can find different configuration components ready to be implemented in your backend</p>"},{"location":"backend/Configurations/#resourcesconfig","title":"ResourcesConfig","text":"<p>This configuration class allows the backend to serve static resources</p> JavaKotlin <pre><code>import org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\nimport org.springframework.web.servlet.resource.PathResourceResolver;\n\n/**\n * The {@code ResourceConfigs} class is useful to set the configuration of the resources to correctly serve the\n * images by the server\n *\n * @author N7ghtm4r3 - Tecknobit\n * @see WebMvcConfigurer\n */\n@Configuration\npublic class ResourcesConfig implements WebMvcConfigurer {\n\n    /**\n     * Add handlers to serve static resources such as images, js, and, css\n     * files from specific locations under web application root, the classpath,\n     * and others.\n     *\n     * @see ResourceHandlerRegistry\n     */\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/**\")\n                .addResourceLocations(\"file:&lt;list&gt;\") // replace &lt;list&gt; with the folders the backend will use\n                .setCachePeriod(0)\n                .resourceChain(true)\n                .addResolver(new PathResourceResolver());\n    }\n\n}\n</code></pre> <pre><code>import org.springframework.context.annotation.Configuration\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer\nimport org.springframework.web.servlet.resource.PathResourceResolver\n\n/**\n * The `ResourceConfigs` class is useful to set the configuration of the resources to correctly serve the\n * images by the server\n *\n * @author N7ghtm4r3 - Tecknobit\n * @see WebMvcConfigurer\n */\n@Configuration\nclass ResourcesConfig : WebMvcConfigurer {\n\n    /**\n     * Add handlers to serve static resources such as images, js, and, css\n     * files from specific locations under web application root, the classpath,\n     * and others.\n     *\n     * @see ResourceHandlerRegistry\n     */\n    override fun addResourceHandlers(registry: ResourceHandlerRegistry) {\n        registry.addResourceHandler(\"/**\")\n            .addResourceLocations(\"file:&lt;list&gt;\") // replace &lt;list&gt; with the folders the backend will use\n            .setCachePeriod(0)\n            .resourceChain(true)\n            .addResolver(PathResourceResolver())\n    }\n\n}\n</code></pre>"},{"location":"backend/Configurations/#cors","title":"CORS","text":"<p>This configuration class allows to set the <code>CORS</code> origin policy for the backend</p> JavaKotlin <pre><code>import org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\n/**\n * The {@code CORSAdvice} class is useful to set the CORS policy\n *\n * @author N7ghtm4r3 - Tecknobit\n */\n@Configuration\npublic class CORSAdvice {\n\n    /**\n     * Method used to set the CORS filter \n     */\n    @Bean\n    @SuppressWarnings({\"rawtypes\"})\n    public FilterRegistrationBean corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(false); // set as you need\n        config.addAllowedOrigin(\"*\"); // set as you need\n        config.addAllowedHeader(\"*\"); // set as you need\n        config.addAllowedMethod(\"*\"); // set as you need\n        source.registerCorsConfiguration(\"/**\", config); // set as you need\n        FilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(source));\n        bean.setOrder(0);\n        return bean;\n    }\n\n}\n</code></pre> <pre><code>import org.springframework.boot.web.servlet.FilterRegistrationBean\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.web.cors.CorsConfiguration\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource\nimport org.springframework.web.filter.CorsFilter\n\n/**\n * The `CORSAdvice` class is useful to set the CORS policy\n *\n * @author N7ghtm4r3 - Tecknobit\n */\n@Configuration\nclass CORSAdvice {\n\n    /**\n     * Method used to set the CORS filter\n     */\n    @Bean\n    @SuppressWarnings([\"rawtypes\"])\n    fun corsFilter(): FilterRegistrationBean&lt;*&gt; {\n        val source = UrlBasedCorsConfigurationSource()\n        val config = CorsConfiguration()\n        config.allowCredentials = false // set as you need\n        config.addAllowedOrigin(\"*\") // set as you need\n        config.addAllowedHeader(\"*\") // set as you need\n        config.addAllowedMethod(\"*\") // set as you need\n        source.registerCorsConfiguration(\"/**\", config) // set as you need\n        val bean: FilterRegistrationBean&lt;*&gt; = FilterRegistrationBean(CorsFilter(source))\n        bean.order = 0\n        return bean\n    }\n\n}\n</code></pre>"},{"location":"backend/Configurations/#messagesource","title":"MessageSource","text":"<p>This configuration is used to configure the messages resources bundle to internationalize your backend application</p> JavaKotlin <pre><code>package com.tecknobit.equinoxbackend.environment.configuration;\n\nimport com.tecknobit.equinoxcore.annotations.Assembler;\nimport com.tecknobit.equinoxcore.helpers.CommonKeysKt;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.web.servlet.LocaleResolver;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\nimport org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\nimport org.springframework.web.servlet.i18n.SessionLocaleResolver;\n\nimport java.nio.charset.StandardCharsets;\n\nimport static com.tecknobit.equinoxcore.helpers.CommonKeysKt.LANGUAGE_KEY;\nimport static java.util.Locale.ENGLISH;\n\n/**\n * The {@code MessageSourceConfig} class configures the message resources bundle\n * used by the backend application.\n *\n * @author N7ghtm4r3 - Tecknobit\n *\n * @since 1.0.9\n *\n * @see WebMvcConfigurer\n */\n@Configuration\npublic class MessageSourceConfig implements WebMvcConfigurer {\n\n    /**\n     * {@code MESSAGES_KEY} default path where are placed the resources bundle\n     */\n    private static final String MESSAGES_KEY = \"lang/messages\"; // customize as needed\n\n    /**\n     * {@code CUSTOM_MESSAGES_KEY} path where the user can place the custom resources bundle\n     */\n    private static final String CUSTOM_MESSAGES_KEY = \"lang/custom_messages\"; // customize as needed\n\n    /**\n     * Method used to load and assemble the bundle resources of the international messages resources\n     *\n     * @return the bundle as {@link ResourceBundleMessageSource}\n     */\n    @Bean\n    @Assembler\n    public ResourceBundleMessageSource messageSource() {\n        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n        messageSource.setBasenames(MESSAGES_KEY, CUSTOM_MESSAGES_KEY); // customize as needed\n        messageSource.setDefaultEncoding(StandardCharsets.UTF_8.name());\n        messageSource.setDefaultLocale(ENGLISH); // customize as needed\n        messageSource.setUseCodeAsDefaultMessage(true); // Set false to prevent exceptions from being thrown when resources are not found\n        return messageSource;\n    }\n\n    /**\n     * Method used to resolve the current locale of the current session\n     *\n     * @return the resolver as {@link LocaleResolver}\n     */\n    @Bean\n    public LocaleResolver localeResolver() {\n        SessionLocaleResolver resolver = new SessionLocaleResolver();\n        resolver.setDefaultLocale(ENGLISH); // customize as needed\n        return resolver;\n    }\n\n    /**\n     * Method used to add a custom interceptor to detect the locale change by the {@code \"language\"} key\n     *\n     * @return the interceptor as {@link LocaleChangeInterceptor}\n     */\n    @Bean\n    public LocaleChangeInterceptor localeChangeInterceptor() {\n        LocaleChangeInterceptor interceptor = new LocaleChangeInterceptor();\n        interceptor.setParamName(\"language\"); // customize as needed\n        return interceptor;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(localeChangeInterceptor());\n    }\n\n}\n</code></pre> <pre><code>/**\n * The `MessageSourceConfig` class configures the message resources bundle\n * used by the backend application.\n *\n * @author N7ghtm4r3 - Tecknobit\n *\n * @since 1.0.9\n *\n * @see WebMvcConfigurer\n */\n@Configuration\nclass MessageSourceConfig : WebMvcConfigurer {\n\n    companion object {\n\n        /**\n         * `MESSAGES_KEY` default path where are placed the resources bundle\n         */\n        private const val MESSAGES_KEY = \"lang/messages\"\n\n        /**\n         * `CUSTOM_MESSAGES_KEY` path where the user can place the custom resources bundle\n         */\n        private const val CUSTOM_MESSAGES_KEY = \"lang/custom_messages\"\n\n    }\n\n    /**\n     * Method used to load and assemble the bundle resources of the international messages resources\n     *\n     * @return the bundle as [ResourceBundleMessageSource]\n     */\n    @Bean\n    @Assembler\n    fun messageSource(): ResourceBundleMessageSource {\n        val messageSource = ResourceBundleMessageSource()\n        messageSource.setBasenames(MESSAGES_KEY, CUSTOM_MESSAGES_KEY) // customize as needed\n        messageSource.setDefaultEncoding(StandardCharsets.UTF_8.name())\n        messageSource.setDefaultLocale(Locale.ENGLISH) // customize as needed\n        messageSource.setUseCodeAsDefaultMessage(true) // Set false to prevent exceptions from being thrown when resources are not found\n        return messageSource\n    }\n\n    /**\n     * Method used to resolve the current locale of the current session\n     *\n     * @return the resolver as [LocaleResolver]\n     */\n    @Bean\n    fun localeResolver(): LocaleResolver {\n        val resolver = SessionLocaleResolver()\n        resolver.setDefaultLocale(Locale.ENGLISH) // customize as needed\n        return resolver\n    }\n\n    /**\n     * Method used to add a custom interceptor to detect the locale change by the `language` key\n     *\n     * @return the interceptor as [LocaleChangeInterceptor]\n     */\n    @Bean\n    fun localeChangeInterceptor(): LocaleChangeInterceptor {\n        val interceptor = LocaleChangeInterceptor()\n        interceptor.paramName = \"language\" // customize as needed\n        return interceptor\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    override fun addInterceptors(registry: InterceptorRegistry) {\n        registry.addInterceptor(localeChangeInterceptor())\n    }\n\n}\n</code></pre>"},{"location":"backend/Environment/","title":"Environment","text":""},{"location":"backend/Environment/#summary","title":"Summary","text":"<p>This group of classes is useful for creating a Spring Boot environment based on the Equinox system. The base environment provides a core set of classes to manage users, controllers, and database operations.</p>"},{"location":"backend/Environment/#main-classes","title":"Main Classes","text":"<ul> <li> <p>EquinoxBaseEndpointsSet   A set of pre-defined endpoints for EquinoxUsersController endpoints</p> </li> <li> <p>EquinoxController   Manages other RestControllers in the backend</p> </li> <li> <p>DefaultEquinoxController   Manages other RestControllers with default usage of   the EquinoxUser   class</p> </li> <li> <p>EquinoxItem   Base class for items used by an Equinox backend</p> </li> </ul>"},{"location":"backend/Environment/#user-utilities","title":"User Utilities","text":"<ul> <li> <p>EquinoxUser   Standard Equinox user class</p> </li> <li> <p>EquinoxLocalUser   Helper for managing a local user session in client applications</p> </li> <li> <p>EquinoxUsersController   Controller for operations on EquinoxUser objects</p> </li> <li> <p>EquinoxUsersService   Helper used by EquinoxUsersController to interact with the database</p> </li> <li> <p>EquinoxUsersRepository   JpaRepository for executing user-related database queries</p> </li> </ul>"},{"location":"backend/Environment/#other-utilities","title":"Other Utilities","text":"<ul> <li> <p>EquinoxRequester   Request helper with   pre-implemented EquinoxUser   requests</p> </li> <li> <p>InputsValidator   Utility class for input validation,   including EquinoxUser   details</p> </li> <li> <p>EquinoxItemsHelper   Helper for database operations   on EquinoxItem,   including batch queries</p> </li> </ul>"},{"location":"backend/Environment/#usage","title":"Usage","text":""},{"location":"backend/Environment/#gradle-configuration","title":"Gradle configuration","text":"<p>To correctly use this environment you need to use the following base gradle configuration</p> GradleGradle (Kotlin) <pre><code>plugins {\n    id 'java'\n    id 'org.springframework.boot' version '3.2.3'\n}\n\napply plugin: 'io.spring.dependency-management'\n\nrepositories {\n    mavenCentral()\n    maven { url 'https://jitpack.io' }\n}\n\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-web:3.2.3'\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.2.3'\n    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.4'\n    implementation 'mysql:mysql-connector-java:8.0.33'\n    implementation 'com.github.N7ghtm4r3:APIManager:2.2.4'\n    implementation 'org.json:json:20250517'\n\n    // implement the backend utilities\n    implementation 'io.github.n7ghtm4r3:equinox-backend:1.1.6'\n\n    // implement the core utilities\n    implementation 'io.github.n7ghtm4r3:equinox-core:1.1.7'\n\n    ...\n}\n</code></pre> <pre><code>plugins {\n    id(\"java\")\n    id(\"org.springframework.boot\") version \"3.2.3\"\n}\n\napply(plugin = \"io.spring.dependency-management\")\n\nrepositories {\n    mavenCentral()\n    maven(\"https://jitpack.io\")\n}\n\ndependencies {\n    implementation(\"org.springframework.boot:spring-boot-starter-web:3.2.3\")\n    implementation(\"org.springframework.boot:spring-boot-starter-data-jpa:3.2.3\")\n    implementation(\"com.fasterxml.jackson.core:jackson-databind:2.15.4\")\n    implementation(\"mysql:mysql-connector-java:8.0.33\")\n    implementation(\"com.github.N7ghtm4r3:APIManager:2.2.4\")\n    implementation(\"org.json:json:20250517\")\n\n    // implement the backend utilities\n    implementation(\"io.github.n7ghtm4r3:equinox-backend:1.1.6\")\n\n    // implement the core utilities\n    implementation(\"io.github.n7ghtm4r3:equinox-core:1.1.7\")\n\n    ...\n}\n</code></pre>"},{"location":"backend/Environment/#out-of-the-box-launch","title":"Out-of-the-Box Launch","text":"<p>To launch the out-of-the-box environment, simply follow the snippet below showing the main method of a SpringApplication</p> JavaKotlin <pre><code>package other.packages;\n\nimport com.tecknobit.equinoxbackend.environment.services.builtin.controller.EquinoxController;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.domain.EntityScan;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.event.ContextRefreshedEvent;\nimport org.springframework.context.event.EventListener;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.servlet.mvc.method.RequestMappingInfo;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n\nimport java.util.Map;\n\n@EnableAutoConfiguration\n@EnableJpaRepositories(\n    value = {\"com.tecknobit.*\" /* REQUIRED */, \"other.packages...\"}\n)\n@EntityScan(\n    value = {\"com.tecknobit.*\" /* REQUIRED */, \"other.packages...\"}\n)\n@ComponentScan(\n    value = {\n        \"com.tecknobit.*\" /* REQUIRED */,\n        \"other.packages...\",\n        \"com.tecknobit.equinoxbackend.environment.configuration\" /* REQUIRED TO USE THE PROVIDED MESSAGES BUNDLE */\n    }\n)\n@SpringBootApplication\npublic class Launcher {\n\n    public static void main(String[] args) {\n        EquinoxController.initEquinoxEnvironment(Launcher.class, args);\n        // ... your code ...\n        // then normally launch your SpringBoot's application\n        SpringApplication.run(Launcher.class, args);\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.builtin.controller.EquinoxController\nimport org.springframework.boot.SpringApplication\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.autoconfigure.domain.EntityScan\nimport org.springframework.context.ApplicationContext\nimport org.springframework.context.event.ContextRefreshedEvent\nimport org.springframework.context.event.EventListener\nimport org.springframework.context.annotation.ComponentScan\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories\nimport org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\nimport org.springframework.web.servlet.mvc.method.RequestMappingInfo\nimport org.springframework.web.method.HandlerMethod\n\n@EnableJpaRepositories(\n    value = [\"com.tecknobit.*\" /* REQUIRED */, \"other.packages...\"]\n)\n@EntityScan(\n    value = [\"com.tecknobit.*\" /* REQUIRED */, \"other.packages...\"]\n)\n@ComponentScan(\n    value = [\n        \"com.tecknobit.*\" /* REQUIRED */,\n        \"other.packages...\",\n        \"com.tecknobit.equinoxbackend.environment.configuration\" /* REQUIRED TO USE THE PROVIDED MESSAGES BUNDLE */\n    ]\n)\n@SpringBootApplication\nclass Launcher {\n\n    companion object {\n        @JvmStatic\n        fun main(args: Array&lt;String&gt;) {\n            EquinoxController.initEquinoxEnvironment(\n                Launcher::class.java,\n                args\n            )\n            // ... your code ...\n            // then normally launch your SpringBoot's application\n            SpringApplication.run(Launcher::class.java, *args)\n        }\n    }\n\n}\n</code></pre> <p>Note</p> <p>The REQUIRED annotations are necessary to correctly launch automatically the EquinoxUsersController and its  related workflow, so if you don't want to use that controller you can simply remove them, and it will not automatically start</p>"},{"location":"backend/Environment/#inspect-the-current-mapped-endpoints","title":"Inspect the current mapped endpoints","text":"<p>To easily inspect the currently mapped endpoints, you can use the following method, which also verifies whether any inherited controllers from EquinoxController are mapped correctly</p> JavaKotlin <pre><code>@EventListener\npublic void handleContextRefresh(ContextRefreshedEvent event) {\n    ApplicationContext applicationContext = event.getApplicationContext();\n    RequestMappingHandlerMapping requestMappingHandlerMapping =\n            applicationContext.getBean(\"requestMappingHandlerMapping\", RequestMappingHandlerMapping.class);\n\n    Map&lt;RequestMappingInfo, HandlerMethod&gt; map = requestMappingHandlerMapping.getHandlerMethods();\n\n    System.out.println(\"----------- CURRENT ENDPOINTS MAPPED -----------\");\n    map.forEach((key, value) -&gt; System.out.println(\"| \" + key + \" \" + value));\n    System.out.println(\"--------------------------------------------\");\n}\n</code></pre> <pre><code>@EventListener\nfun handleContextRefresh(event: ContextRefreshedEvent) {\n    val applicationContext: ApplicationContext = event.applicationContext\n    val requestMappingHandlerMapping = applicationContext\n        .getBean(\"requestMappingHandlerMapping\", RequestMappingHandlerMapping::class.java)\n    val map: Map&lt;RequestMappingInfo, HandlerMethod&gt; = requestMappingHandlerMapping.handlerMethods\n    println(\"----------- CURRENT ENDPOINTS MAPPED -----------\")\n    map.forEach { key, value -&gt; println(\"| $key $value\") }\n    println(\"--------------------------------------------\")\n}\n</code></pre>"},{"location":"backend/Environment/#launching-the-backend-without-a-database","title":"Launching the backend without a database","text":"<p>If your architecture does not require a database you can exclude it as follows:</p> JavaKotlin <pre><code>@SpringBootApplication\n@EnableAutoConfiguration(\n    exclude = {DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class}\n)\n</code></pre> <pre><code>@SpringBootApplication\n@EnableAutoConfiguration(\n    exclude = [DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class]\n)\n</code></pre>"},{"location":"backend/Environment/#extending-the-environment","title":"Extending the environment","text":"<p>Follow this guide to customize any classes of the base environment and ensure your changes function as expected</p>"},{"location":"backend/Environment/#additional-backend-setup","title":"Additional Backend Setup","text":""},{"location":"backend/Environment/#create-the-config-file","title":"Create the config file","text":"<p>To add extra configuration to your backend instance, create an <code>equinox.config</code> file and place it in the following location:</p> <pre><code>resources\n  \u2514\u2500\u2500 equinox.config\n</code></pre>"},{"location":"backend/Environment/#fill-the-configuration","title":"Fill the configuration","text":"<p>You can copy and fill the below <code>JSON</code> as you need:</p> <pre><code>{\n  // omit this to disable the server protector usage\n  \"server_protector\": {\n    \"storage_path\": \"storage_path_of_the_protector\",\n    \"save_message\": \"save_message_value\"\n  },\n  \"resources\": {\n    \"resources_folder\": true,\n    // false to avoid to create the resources folder \n    \"subdirectories\": [\n      // list of subdirectories to create inside the resources folder, omit to avoid the creation\n    ]\n  }\n}\n</code></pre>"},{"location":"backend/Environment/#equinoxuser-customization","title":"EquinoxUser customization","text":"<p>In this example, will be added the <code>currency</code> field to the custom user and will be included the related update request.</p>"},{"location":"backend/Environment/#creating-a-customuser","title":"Creating a CustomUser","text":"<p>To add the custom field you need to extend the EquinoxUser class as follows:</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.entity.EquinoxUser;\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport org.json.JSONObject;\n\n@Entity\npublic class CustomUser extends EquinoxUser {\n\n    @Column\n    private final String currency;\n\n    public CustomUser(String id, String token, String name, String surname, String email, String password, String language,\n                      String currency) {\n        super(id, token, name, surname, email, password, language);\n        this.currency = currency;\n    }\n\n    public CustomUser(String id, String token, String name, String surname, String email, String password, String profilePic,\n                      String language, ApplicationTheme theme, String currency) {\n        super(id, token, name, surname, email, password, profilePic, language, theme);\n        this.currency = currency;\n    }\n\n    public String getCurrency() {\n        return currency;\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.entity.EquinoxUser\nimport jakarta.persistence.Column\nimport jakarta.persistence.Entity\n\n@Entity\nclass CustomUser : EquinoxUser {\n\n    @Column\n    val currency: String\n\n    constructor(\n        id: String,\n        token: String,\n        name: String,\n        surname: String,\n        email: String,\n        password: String,\n        language: String,\n        currency: String\n    ) : super(id, token, name, surname, email, password, language) {\n        this.currency = currency\n    }\n\n    constructor(\n        id: String,\n        token: String,\n        name: String,\n        surname: String,\n        email: String,\n        password: String,\n        profilePic: String,\n        language: String,\n        theme: ApplicationTheme,\n        currency: String\n    ) : super(id, token, name, surname, email, password, profilePic, language, theme) {\n        this.currency = currency\n    }\n\n}\n</code></pre> <p>A single <code>users</code> table will be created in the database, with the <code>dtype</code> field used as a discriminator to distinguish between different classes. This does not affect the existing queries implemented for the EquinoxUser class</p>"},{"location":"backend/Environment/#creating-the-dedicated-repository","title":"Creating the dedicated repository","text":"<p>To handle the database operations of your custom user, you have to create the dedicated repository extending the EquinoxUsersRepository as follows:</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.repository.EquinoxUsersRepository;\nimport jakarta.transaction.Transactional;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.data.jpa.repository.Modifying;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.stereotype.Service;\n\nimport static com.tecknobit.equinoxbackend.environment.services.builtin.entity.EquinoxItem.IDENTIFIER_KEY;\nimport static com.tecknobit.equinoxbackend.environment.services.users.entity.EquinoxUser.USERS_KEY;\n\n@Repository\npublic interface CustomUsersRepository extends EquinoxUsersRepository&lt;CustomUser&gt; {\n\n      @Modifying(clearAutomatically = true)\n      @Transactional\n      @Query(\n              value = \"UPDATE \" + USERS_KEY + \" SET \" + \"currency\" + \"=:\" + \"currency\" + \" WHERE \"\n                      + IDENTIFIER_KEY + \"=:\" + IDENTIFIER_KEY,\n              nativeQuery = true\n      )\n      void changeCurrency(\n              @Param(\"currency\") String newCurrency,\n              @Param(IDENTIFIER_KEY) String id\n      );\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.repository.EquinoxUsersRepository\nimport jakarta.transaction.Transactional\nimport org.springframework.data.jpa.repository.Modifying\nimport org.springframework.data.jpa.repository.Query\nimport org.springframework.data.repository.query.Param\nimport org.springframework.stereotype.Repository\nimport com.tecknobit.equinoxbackend.environment.services.builtin.entity.EquinoxItem.IDENTIFIER_KEY\nimport com.tecknobit.equinoxbackend.environment.services.users.entity.EquinoxUser.USERS_KEY\n\n@Repository\ninterface CustomUsersRepository : EquinoxUsersRepository&lt;CustomUser&gt; {\n\n    @Modifying(clearAutomatically = true)\n    @Transactional\n    @Query(\n        value = \"UPDATE $USERS_KEY SET currency =: currency WHERE $IDENTIFIER_KEY =: $IDENTIFIER_KEY\",\n        nativeQuery = true\n    )\n    fun changeCurrency(\n        @Param(\"currency\") newCurrency: String,\n        @Param(IDENTIFIER_KEY) id: String\n    )\n\n}\n</code></pre>"},{"location":"backend/Environment/#creating-the-dedicated-service","title":"Creating the dedicated service","text":"<p>To handle the requests of your custom user, you have to create the dedicated service extending the EquinoxUsersService as follows:</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.service.EquinoxUsersService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CustomUsersService extends EquinoxUsersService&lt;CustomUser, CustomUsersRepository&gt; {\n\n    public void changeCurrency(String newCurrency, String userId) {\n        usersRepository.changeCurrency(newCurrency, userId);\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.service.EquinoxUsersService\nimport org.springframework.stereotype.Service\n\n@Service\nclass CustomUsersService : EquinoxUsersService&lt;CustomUser, CustomUsersRepository&gt;() {\n\n    fun changeCurrency(\n        newCurrency: String,\n        userId: String\n    ) {\n        usersRepository.changeCurrency(\n            newCurrency,\n            userId\n        )\n    }\n\n}\n</code></pre>"},{"location":"backend/Environment/#creating-the-dedicated-controller","title":"Creating the dedicated controller","text":"<p>To perform and handle the requests of your custom user, you have to create the dedicated service extending the EquinoxUsersService as follows:</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController;\nimport org.json.JSONObject;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Map;\n\n@RestController\npublic class CustomUsersController extends EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt; {\n\n    // you can override an implemented method to customize the response as you necessities\n    @Override\n    public String changeEmail(\n            String id,\n            String token,\n            Map&lt;String, String&gt; payload\n    ) {\n        String response = super.changeEmail(id, token, payload);\n        JSONObject customResponse = new JSONObject(response);\n        customResponse.put(\"currency\", \"currency_value\");\n        return customResponse.toString();\n    }\n\n    @PatchMapping(\n            path = {\"users/{user_id}/changeCurrency\"},\n            headers = {TOKEN_KEY}\n    )\n    public String changeCurrency(\n            @PathVariable(\"id\") String id,\n            @RequestHeader(\"token\") String token,\n            @RequestBody Map&lt;String, String&gt; payload\n    ) {\n        if (isMe(id, token)) {\n            usersHelper.changeCurrency(payload.get(\"currency\"), id);\n            return successResponse();\n        } else\n            return notAuthorizedOrWrongDetailsResponse();\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController\nimport org.json.JSONObject\nimport org.springframework.web.bind.annotation.*\n\n@RestController\nclass CustomUsersController : EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt;() {\n\n    // you can override an implemented method to customize the response as you necessities\n    override fun changeEmail(\n        id: String,\n        token: String,\n        payload: Map&lt;String, String&gt;\n    ): String {\n        val response = super.changeEmail(id, token, payload)\n        val customResponse = JSONObject(response)\n        customResponse.put(\"currency\", \"currency_value\")\n        return customResponse.toString()\n    }\n\n    @PatchMapping(\n        path = [\"users/{user_id}/changeCurrency\"],\n        headers = [TOKEN_KEY]\n    )\n    fun changeCurrency(\n        @PathVariable(\"id\") id: String,\n        @RequestHeader(\"token\") token: String,\n        @RequestBody payload: Map&lt;String, String&gt;\n    ): String {\n        return if (isMe(id, token)) {\n            usersHelper.changeCurrency(\n                payload[\"currency\"] ?: \"\",\n                id\n            )\n            successResponse()\n        } else\n            notAuthorizedOrWrongDetailsResponse()\n    }\n\n}\n</code></pre> <p>You can also create your own default controller as DefaultEquinoxController with your own CustomUser instead:</p> JavaKotlin <pre><code>public abstract class MyOwnDefaultController extends EquinoxController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt; {\n}\n</code></pre> <pre><code>abstract class MyOwnDefaultController : EquinoxController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt;() {\n}\n</code></pre>"},{"location":"backend/Environment/#custom-sign-up","title":"Custom sign-up","text":"<p>Follow this guide to correctly perform a custom sign-up operation</p>"},{"location":"backend/Environment/#override-the-getsignupkeys-method","title":"Override the getSignUpKeys() method","text":"<p>To create the correct sign-up query with your custom parameters for the CustomUser, override the method below and include the keys of any custom properties you want to insert during the sign-up operation</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.service.EquinoxUsersService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CustomUsersService extends EquinoxUsersService&lt;CustomUser, CustomUsersRepository&gt; {\n\n    @Override\n    protected List&lt;String&gt; getSignUpKeys() {\n        ArrayList&lt;String&gt; custom = new ArrayList&lt;&gt;(super.getSignUpKeys());\n        custom.add(\"currency\");\n        return custom;\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.service.EquinoxUsersService\nimport org.springframework.stereotype.Service\n\n@Service\nclass CustomUsersService : EquinoxUsersService&lt;CustomUser, CustomUsersRepository&gt;() {\n\n    override fun getSignUpKeys(): List&lt;String&gt; {\n        val custom = ArrayList(super.getSignUpKeys())\n        custom.add(\"currency\")\n        return custom\n    }\n\n}\n</code></pre>"},{"location":"backend/Environment/#retrive-the-custom-parameters-from-the-payload","title":"Retrive the custom parameters from the payload","text":"<p>Next, retrieve the custom parameters from the sign-up request by overriding the method below in the CustomUsersController</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController;\nimport org.json.JSONObject;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\npublic class CustomUsersController extends EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt; {\n\n    @Override\n    @CustomParametersOrder(order = {\"currency\"}) // optional annotation\n    protected Object[] getSignUpCustomParams() {\n        return new Object[]{jsonHelper.getString(\"currency\", null), /* other parameters */};\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController\nimport org.json.JSONObject\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\nclass CustomUsersController : EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt;() {\n\n    @CustomParametersOrder(order = [\"currency\"]) // optional annotation\n    override fun getSignUpCustomParams(): Array&lt;Any?&gt; {\n        return arrayOf(\n            jsonHelper.getString(\"currency\",null)\n            // other parameters\n        )\n    }\n\n}\n</code></pre>"},{"location":"backend/Environment/#custom-parameters-validation","title":"Custom parameters validation","text":"<p>You can also validate your custom parameters if needed by overriding the validateSignUp method from CustomUsersController as follows:</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController;\nimport org.json.JSONObject;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\npublic class CustomUsersController extends EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt; {\n\n    @Override\n    @CustomParametersOrder(order = {\"currency\"}) // optional annotation\n    protected String validateSignUp(String name, String surname, String email, String password, \n                                    String language, Object... custom) {\n        String validation = super.validateSignUp(name, surname, email, password, language, custom);\n        if (validation != null)\n            return validation;\n        if (custom[0] == null)\n            return \"wrong_currency_key\";\n        return null;\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\nclass CustomUsersController : EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt;() {\n\n    @CustomParametersOrder(order = [\"currency\"]) // optional annotation\n    override fun validateSignUp(\n        name: String,\n        surname: String,\n        email: String,\n        password: String,\n        language: String,\n        vararg custom: Any?\n    ): String? {\n        val validation = super.validateSignUp(\n            name,\n            surname,\n            email,\n            password,\n            language,\n            *custom\n        )\n        if (validation != null) \n            return validation\n        if (custom[0] == null) \n            return \"wrong_currency_key\"\n        return null\n    }\n\n}\n</code></pre>"},{"location":"backend/Environment/#custom-sign-in","title":"Custom sign-in","text":"<p>Follow this guide to correctly perform a custom sign-in operation</p>"},{"location":"backend/Environment/#override-the-getsigninkeys-method","title":"Override the getSignInKeys() method","text":"<p>To create the correct sign-in query with your custom parameters for the CustomUser, override the method below and include the keys of any custom properties you want to use during the sign-in operation</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.service.EquinoxUsersService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class CustomUsersService extends EquinoxUsersService&lt;CustomUser, CustomUsersRepository&gt; {\n\n    @Override\n    protected List&lt;String&gt; getSignInKeys() {\n        ArrayList&lt;String&gt; custom = new ArrayList&lt;&gt;(super.getSignInKeys());\n        custom.add(\"currency\");\n        return custom;\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.service.EquinoxUsersService\nimport org.springframework.stereotype.Service\n\n@Service\nclass CustomUsersService : EquinoxUsersService&lt;CustomUser, CustomUsersRepository&gt;() {\n\n    override fun getSignInKeys(): List&lt;String&gt; {\n        val custom = ArrayList(super.getSignInKeys())\n        custom.add(\"currency\")\n        return custom\n    }\n\n}\n</code></pre>"},{"location":"backend/Environment/#retrive-the-custom-parameters-from-the-payload_1","title":"Retrive the custom parameters from the payload","text":"<p>Next, retrieve the custom parameters from the sign-in request by overriding the method below in the CustomUsersController</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController;\nimport org.json.JSONObject;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\npublic class CustomUsersController extends EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt; {\n\n    @Override\n    @CustomParametersOrder(order = {\"currency\"}) // optional annotation\n    protected Object[] getSignInCustomParams() {\n        return new Object[]{jsonHelper.getString(\"currency\", null)};\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\nclass CustomUsersController : EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt;() {\n\n    @CustomParametersOrder(order = [\"currency\"]) // optional annotation\n    override fun getSignInCustomParams(): Array&lt;Any?&gt; {\n        return arrayOf(jsonHelper.getString(\"currency\", null))\n    }\n\n}\n</code></pre>"},{"location":"backend/Environment/#custom-parameters-validation_1","title":"Custom parameters validation","text":"<p>You can also validate your custom parameters if needed by overriding the validateSignIn method from CustomUsersController as follows:</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController;\nimport org.json.JSONObject;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\npublic class CustomUsersController extends EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt; {\n\n    @Override\n    @CustomParametersOrder(order = {\"currency\"}) // optional annotation\n    protected String validateSignIn(String email, String password, String language, Object... custom) {\n        String validation = super.validateSignIn(email, password, language, custom);\n        if (validation != null)\n            return validation;\n        if (custom[0] == null)\n            return \"wrong_currency_key\";\n        return null;\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\nclass CustomUsersController : EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt;() {\n\n    @CustomParametersOrder(order = [\"currency\"]) // optional annotation\n    override fun validateSignIn(\n        email: String,\n        password: String,\n        language: String,\n        vararg custom: Any?\n    ): String? {\n        val validation = super.validateSignIn(email, password, language, *custom)\n        if (validation != null) \n            return validation\n        if (custom.isEmpty() || custom[0] == null) \n            return \"wrong_currency_key\"\n        return null\n    }\n\n}\n</code></pre>"},{"location":"backend/Environment/#customize-the-sign-in-response","title":"Customize the sign-in response","text":"<p>You can also customize to the sign-in response adding your custom parameters overriding the below method as follows:</p> JavaKotlin <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController;\nimport org.json.JSONObject;\nimport org.springframework.web.bind.annotation.*;\nimport com.tecknobit.equinoxcore.annotations.Assembler;\n\n@RestController\npublic class CustomUsersController extends EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt; {\n\n    @Override\n    @Assembler // optional annotation\n    protected JSONObject assembleSignInSuccessResponse(CustomUser user) {\n        JSONObject response = super.assembleSignInSuccessResponse(user);\n        response.put(\"currency\", user.getCurrency());\n        return response;\n    }\n\n}\n</code></pre> <pre><code>package other.packages\n\nimport com.tecknobit.equinoxbackend.environment.services.users.controller.EquinoxUsersController\nimport org.json.JSONObject\nimport org.springframework.web.bind.annotation.RestController\nimport com.tecknobit.equinoxcore.annotations.Assembler\n\n@RestController\nclass CustomUsersController : EquinoxUsersController&lt;CustomUser, CustomUsersRepository, CustomUsersService&gt;() {\n\n    @Assembler // optional annotation\n    override fun assembleSignInSuccessResponse(\n        user: CustomUser\n    ): JSONObject {\n        val response = super.assembleSignInSuccessResponse(user)\n        response.put(\"currency\", user.currency)\n        return response\n    }\n\n}\n</code></pre>"},{"location":"backend/Environment/#customizing-the-messages-resource-bundle","title":"Customizing the messages resource bundle","text":"<p>You can create your own resource set to internationalize your backend by defining it as follows:</p> <pre><code>resources\n  \u2514\u2500\u2500 lang\n       \u2514\u2500\u2500 custom_messages.properties\n       \u2514\u2500\u2500 custom_messages_any_locale.properties\n       \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"backend/APIs/BatchSynchronizationProcedure/","title":"BatchSynchronizationProcedure","text":"<p>This API is designed to compact and to clean implement a batch synchronization procedure giving the base behavior that a batch synchronization need to have</p>"},{"location":"backend/APIs/BatchSynchronizationProcedure/#implementation","title":"Implementation","text":""},{"location":"backend/APIs/BatchSynchronizationProcedure/#create-the-support-item","title":"Create the support item","text":"<p>It is suggested to use <code>JoinTableSyncBatchItem</code> as base for the support item, but is not required</p> <pre><code>@BatchQueryItem\npublic class TeamMemberBatchItem extends JoinTableSyncBatchItem&lt;String, String&gt; {\n\n    public TeamMemberBatchItem(String teamId, String memberId) {\n        super(teamId, memberId);\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/BatchSynchronizationProcedure/#create-the-procedure","title":"Create the procedure","text":"<pre><code>@BatchSyncProcedureImpl\npublic class TeamMemberBatchSyncProcedure extends BatchSynchronizationProcedure&lt;String, String, TeamMemberBatchItem&gt; {\n\n    public TeamMemberBatchSyncProcedure(String owner, Collection&lt;String&gt; ownedItems, EntityManager entityManager) {\n        super(owner, ownedItems, \"team_members\", entityManager);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected SyncBatchModel createModel() {\n        // create the model\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected BatchQuery&lt;TeamMemberBatchItem&gt; createBatchQuery() {\n        // create the query\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/BatchSynchronizationProcedure/#usage","title":"Usage","text":""},{"location":"backend/APIs/BatchSynchronizationProcedure/#use-in-a-service","title":"Use in a service","text":"<p>The inheritance with the EquinoxItemsHelper is required to properly provide the <code>entityManager</code></p> JavaKotlin <pre><code>import java.util.List;\n\n@Service\npublic class TeamsService extends EquinoxItemsHelper {\n\n    public void syncMembers(String teamId, List&lt;String&gt; members) {\n        TeamMemberBatchSyncProcedure procedure = new TeamMemberBatchSyncProcedure(teamId, members, entityManager);\n        // create the callback to retrieve the current data (required)\n        procedure.setCurrentDataCallback(new BatchSynchronizationProcedure.CurrentDataCallback&lt;String&gt;() {\n            @Override\n            public Collection&lt;String&gt; retrieveCurrentData() {\n                List&lt;String&gt; currentData = List.of();\n                // custom logic to fill the list\n                return currentData;\n            }\n        });\n\n        // execute the procedure\n        procedure.executeBatchSynchronization();\n    }\n\n}\n</code></pre> <pre><code>import org.springframework.stereotype.Service\n\n@Service\nclass TeamsService : EquinoxItemsHelper() {\n\n    fun syncMembers(\n        teamId: String,\n        members: List&lt;String&gt;\n    ) {\n        val procedure = TeamMemberBatchSyncProcedure(\n            teamId,\n            members,\n            entityManager\n        )\n\n        // create the callback to retrieve the current data (required)\n        procedure.setCurrentDataCallback(object : BatchSynchronizationProcedure.CurrentDataCallback&lt;String&gt; {\n            override fun retrieveCurrentData(): Collection&lt;String&gt; {\n                val currentData: List&lt;String&gt; = listOf()\n                // custom logic to fill the list\n                return currentData\n            }\n        })\n\n        // execute the procedure\n        procedure.executeBatchSynchronization()\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/BatchSynchronizationProcedure/#mirrored-usage","title":"Mirrored usage","text":"<p>If you have also a mirrored service of the <code>TeamsService</code> like for example <code>MembersService</code> and you need to sync the teams of a member you can use a dedicated converter to properly create the support item to use in the same sync procedure you created for the team's side (TeamMemberBatchSyncProcedure), this because the support item has a fixed constructor, but the owner entity changes related to the service where the procedure is invoked. You can do as follows:</p> JavaKotlin <pre><code>import java.util.List;\n\n@Service\npublic class MembersService extends EquinoxItemsHelper {\n\n    public void syncTeams(String memberId, List&lt;String&gt; teams) {\n        TeamMemberBatchSyncProcedure procedure = new TeamMemberBatchSyncProcedure(memberId, teams, entityManager);\n        // create the callback to retrieve the current data (required)\n        procedure.setCurrentDataCallback(new BatchSynchronizationProcedure.CurrentDataCallback&lt;String&gt;() {\n            @Override\n            public Collection&lt;String&gt; retrieveCurrentData() {\n                List&lt;String&gt; currentData = List.of();\n                // custom logic to fill the list\n                return currentData;\n            }\n        });\n        // create the converter to properly create the support item\n        procedure.useConverter(teamsIds -&gt; {\n            List&lt;TeamMemberBatchItem&gt; teamMemberBatchItems = new ArrayList&lt;&gt;();\n            for (String teamId : teamsIds)\n                // the member identifier is fixed, meanwhile the team identifier changes\n                teamMemberBatchItems.add(new TeamMemberBatchItem(teamId, memberId));\n            return teamMemberBatchItems;\n        });\n        // execute the procedure\n        procedure.executeBatchSynchronization();\n    }\n\n}\n</code></pre> <pre><code>import org.springframework.stereotype.Service\n\n@Service\nclass MembersService : EquinoxItemsHelper() {\n\n    fun syncTeams(\n        memberId: String,\n        teams: List&lt;String&gt;\n    ) {\n        val procedure = TeamMemberBatchSyncProcedure(\n            memberId,\n            teams,\n            entityManager\n        )\n\n        // create the callback to retrieve the current data (required)\n        procedure.setCurrentDataCallback(object : BatchSynchronizationProcedure.CurrentDataCallback&lt;String&gt; {\n            override fun retrieveCurrentData(): Collection&lt;String&gt; {\n                val currentData: List&lt;String&gt; = listOf()\n                // custom logic to fill the list\n                return currentData\n            }\n        })\n\n        // create the converter to properly create the support item\n        procedure.useConverter { teamsIds -&gt;\n            val teamMemberBatchItems = ArrayList&lt;TeamMemberBatchItem&gt;()\n            for (teamId in teamsIds) {\n                // the member identifier is fixed, meanwhile the team identifier changes\n                teamMemberBatchItems.add(TeamMemberBatchItem(teamId, memberId))\n            }\n            teamMemberBatchItems\n        }\n\n        // execute the procedure\n        procedure.executeBatchSynchronization()\n    }\n\n}\n</code></pre> <p>Then use the converter in the procedure (if you need to use the converter you have to create a converter for both sides)</p> JavaKotlin <pre><code>@BatchSyncProcedureImpl\npublic class TeamMemberBatchSyncProcedure extends BatchSynchronizationProcedure&lt;String, String, TeamMemberBatchItem&gt; {\n\n    public TeamMemberBatchSyncProcedure(String owner, Collection&lt;String&gt; ownedItems, EntityManager entityManager) {\n        super(owner, ownedItems, \"team_members\", entityManager);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected SyncBatchModel createModel() {\n        return new SyncBatchModel() {\n            @Override\n            public Collection&lt;TeamMemberBatchItem&gt; getCurrentData() {\n                // use the converter to convert the current data retrieved with the CurrentDataCallback\n                return converter.convert(currentDataCallback.retrieveCurrentData());\n            }\n\n            @Override\n            public String[] getDeletingColumns() {\n                return new String[]{\"team_id\", \"member_id\"};\n            }\n        };\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected BatchQuery&lt;TeamMemberBatchItem&gt; createBatchQuery() {\n        return new BatchQuery&lt;&gt;() {\n            @Override\n            public Collection&lt;TeamMemberBatchItem&gt; getData() {\n                // use the converter \n                return converter.convert(ownedItems);\n            }\n\n            @Override\n            @TableColumns(columns = {\"team_id\", \"member_id\"})\n            public void prepareQuery(Query query, int index, Collection&lt;TeamMemberBatchItem&gt; items) {\n                for (TeamMemberBatchItem element : items) {\n                    query.setParameter(index++, element.getOwner());\n                    query.setParameter(index++, element.getOwned());\n                }\n            }\n\n            @Override\n            public String[] getColumns() {\n                return new String[]{\"team_id\", \"member_id\"};\n            }\n        };\n    }\n\n}\n</code></pre> <pre><code>@BatchSyncProcedureImpl\nclass TeamMemberBatchSyncProcedure(\n    owner: String,\n    ownedItems: Collection&lt;String&gt;,\n    entityManager: EntityManager\n) : BatchSynchronizationProcedure&lt;String, String, TeamMemberBatchItem&gt;(\n    owner,\n    ownedItems,\n    \"team_members\",\n    entityManager\n) {\n\n    /**\n     * {@inheritDoc}\n     */\n    override fun createModel(): SyncBatchModel {\n        return object : SyncBatchModel() {\n            override fun getCurrentData(): Collection&lt;TeamMemberBatchItem&gt; {\n                // use the converter to convert the current data retrieved with the CurrentDataCallback\n                return converter.convert(currentDataCallback.retrieveCurrentData())\n            }\n\n            override fun getDeletingColumns(): Array&lt;String&gt; {\n                return arrayOf(\"team_id\", \"member_id\")\n            }\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    override fun createBatchQuery(): BatchQuery&lt;TeamMemberBatchItem&gt; {\n        return object : BatchQuery&lt;TeamMemberBatchItem&gt;() {\n            override fun getData(): Collection&lt;TeamMemberBatchItem&gt; {\n                // use the converter\n                return converter.convert(ownedItems)\n            }\n\n            @TableColumns(columns = [\"team_id\", \"member_id\"])\n            override fun prepareQuery(\n                query: Query,\n                index: Int,\n                items: Collection&lt;TeamMemberBatchItem&gt;\n            ) {\n                var idx = index\n                for (element in items) {\n                    query.setParameter(idx++, element.owner)\n                    query.setParameter(idx++, element.owned)\n                }\n            }\n\n            override fun getColumns(): Array&lt;String&gt; {\n                return arrayOf(\"team_id\", \"member_id\")\n            }\n        }\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxEvents/","title":"EquinoxEvents","text":"<p>Use the <code>EquinoxEventsEmitter</code> API, built on top of the <code>ApplicationEventPublisher</code> system, to share events between services in a strict and controlled way by leveraging <code>enums</code></p>"},{"location":"backend/APIs/EquinoxEvents/#implementation","title":"Implementation","text":""},{"location":"backend/APIs/EquinoxEvents/#create-the-events-set","title":"Create the events set","text":"<p>Create the enum with the events to share</p> JavaKotlin <pre><code>public enum TestEvent {\n\n    EVENT_ONE,\n\n    EVENT_TWO\n\n}\n</code></pre> <pre><code>enum class TestEvent {\n\n    EVENT_ONE,\n\n    EVENT_TWO\n\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxEvents/#create-the-equinoxapplicationevent","title":"Create the EquinoxApplicationEvent","text":"<p>You can choose the constructor to implement based on your requirements to create your custom application event to share between services</p> JavaKotlin <pre><code>public class TestApplicationEvent extends EquinoxApplicationEvent&lt;TestEvent&gt; {\n\n    public TestApplicationEvent(Object source, TestEvent eventType) {\n        super(source, eventType);\n    }\n\n    public TestApplicationEvent(Object source, Clock clock, TestEvent eventType) {\n        super(source, clock, eventType);\n    }\n\n    public TestApplicationEvent(Object source, TestEvent eventType, Object... extra) {\n        super(source, eventType, extra);\n    }\n\n    public TestApplicationEvent(Object source, Clock clock, TestEvent eventType, Object... extra) {\n        super(source, clock, eventType, extra);\n    }\n\n    public TestApplicationEvent(Object source, TestEvent eventType, OnEventConsumed onEventConsumed) {\n        super(source, eventType, onEventConsumed);\n    }\n\n    public TestApplicationEvent(Object source, Clock clock, TestEvent eventType, OnEventConsumed onEventConsumed) {\n        super(source, clock, eventType, onEventConsumed);\n    }\n\n    public TestApplicationEvent(Object source, TestEvent eventType, OnEventConsumed onEventConsumed, Object... extra) {\n        super(source, eventType, onEventConsumed, extra);\n    }\n\n    public TestApplicationEvent(Object source, Clock clock, TestEvent eventType, OnEventConsumed onEventConsumed, Object... extra) {\n        super(source, clock, eventType, onEventConsumed, extra);\n    }\n\n}\n</code></pre> <pre><code>class TestApplicationEvent : EquinoxApplicationEvent&lt;TestEvent&gt; {\n\n    constructor(\n        source: Any,\n        eventType: TestEvent\n    ) : super(source, eventType)\n\n    constructor(\n        source: Any,\n        clock: Clock,\n        eventType: TestEvent\n    ) : super(source, clock, eventType)\n\n    constructor(\n        source: Any,\n        eventType: TestEvent,\n        vararg extra: Any\n    ) : super(source, eventType, *extra)\n\n    constructor(\n        source: Any,\n        clock: Clock,\n        eventType: TestEvent,\n        vararg extra: Any\n    ) : super(source, clock, eventType, *extra)\n\n    constructor(\n        source: Any,\n        eventType: TestEvent,\n        onEventConsumed: OnEventConsumed\n    ) : super(source, eventType, onEventConsumed)\n\n    constructor(\n        source: Any,\n        clock: Clock,\n        eventType: TestEvent,\n        onEventConsumed: OnEventConsumed\n    ) : super(source, clock, eventType, onEventConsumed)\n\n    constructor(\n        source: Any,\n        eventType: TestEvent,\n        onEventConsumed: OnEventConsumed,\n        vararg extra: Any\n    ) : super(source, eventType, onEventConsumed, *extra)\n\n    constructor(\n        source: Any,\n        clock: Clock,\n        eventType: TestEvent,\n        onEventConsumed: OnEventConsumed,\n        vararg extra: Any\n    ) : super(source, clock, eventType, onEventConsumed, *extra)\n\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxEvents/#create-the-emitter","title":"Create the emitter","text":"<p>You can create your own emitter to customize or for a better readability</p> JavaKotlin <pre><code>@EventsNotifier // not mandatory, but suggested\n@Service // required annotation\npublic class TestEventsEmitter extends EquinoxEventsEmitter&lt;TestEvent&gt; {\n\n    // your custom implementation\n\n}\n</code></pre> <pre><code>@EventsNotifier // not mandatory, but suggested\n@Service // required annotation\nclass TestEventsEmitter : EquinoxEventsEmitter&lt;TestEvent&gt;() {\n\n    // your custom implementation\n\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxEvents/#create-the-collector","title":"Create the collector","text":"<p>You can create your own collector to customize or for a better readability</p> JavaKotlin <pre><code>@EventsHandler // not mandatory, but suggested\n@FunctionalInterface // not mandatory, but suggested\npublic interface TestEventsCollector extends EquinoxEventsCollector&lt;TestEvent, TestApplicationEvent&gt; {\n\n    // your custom implementation\n\n}\n</code></pre> <pre><code>@EventsHandler // not mandatory, but suggested\n@FunctionalInterface // not mandatory, but suggested\ninterface TestEventsCollector : EquinoxEventsCollector&lt;TestEvent, TestApplicationEvent&gt; {\n\n    // your custom implementation\n\n}\n</code></pre> <p>Tip</p> <p>Place all files related to the events system into a dedicated <code>events</code> package to improve readability and to maintain a clean architecture</p> <pre><code>com.your.package\n\u2514\u2500\u2500 events\n     \u2514\u2500\u2500 TestEvent\n     \u2514\u2500\u2500 TestApplicationEvent\n     \u2514\u2500\u2500 TestEventsEmitter\n</code></pre>"},{"location":"backend/APIs/EquinoxEvents/#usage","title":"Usage","text":""},{"location":"backend/APIs/EquinoxEvents/#emit-an-event","title":"Emit an event","text":"<p>You can wire the emitter with a service or multiple services to emit the events</p> JavaKotlin <pre><code>@Service\npublic class EventsService {\n\n    @Autowired // wire the emitter\n    private TestEventsEmitter eventsEmitter;\n\n    // any service method\n    public void triggerEmitter() {\n        // choose from your set the event to emit\n        TestEvent type = EVENT_ONE;\n\n        // create a not required callback to execute after the event emitted is performed\n        EquinoxEventsCollector.OnEventConsumed onEventConsumed = new EquinoxEventsCollector.OnEventConsumed() {\n            @Override\n            public void perform(Object... extra) {\n                // perform extra action after the event has been consumed\n            }\n        };\n\n        // create the event\n        TestApplicationEvent event = new TestApplicationEvent(this, type, onEventConsumed, /*add extra arguments if needed*/);\n\n        // emit the event\n        eventsEmitter.emitEvent(event);\n    }\n\n}\n</code></pre> <pre><code>@Service\nclass EventsService {\n\n    @Autowired // wire the emitter\n    private lateinit var eventsEmitter: TestEventsEmitter\n\n    // any service method\n    fun triggerEmitter() {\n        // choose from your set the event to emit\n        val type: TestEvent = TestEvent.EVENT_ONE\n\n        // create a not required callback to execute after the event emitted is performed\n        val onEventConsumed = object : EquinoxEventsCollector.OnEventConsumed {\n            override fun perform(vararg extra: Any) {\n                // perform extra action after the event has been consumed\n            }\n        }\n\n        // create the event\n        val event = TestApplicationEvent(this, type, onEventConsumed /*, add extra arguments if needed */)\n\n        // emit the event\n        eventsEmitter.emitEvent(event)\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxEvents/#collect-the-emitted-events","title":"Collect the emitted events","text":"<p>You can create multiple collectors implementing the <code>EquinoxEventsCollector</code> interface</p> JavaKotlin <pre><code>@Service\npublic class AnyService implements TestEventsCollector {\n\n    @Override\n    public void onEventCollected(TestApplicationEvent event) {\n        // get the extra arguments from the event\n        Object[] extra = event.getExtra();\n\n        // handle the specific type of the event collected\n        switch (event.getEventType()) {\n            case EVENT_ONE -&gt; {\n                System.out.println(\"EVENT_ONE collected!\");\n\n                // perform the OnEventConsumed if needed\n                event.performOnEventConsumed();\n            }\n            case EVENT_TWO -&gt; {\n                System.out.println(\"EVENT_TWO collected!\");\n\n                // perform the OnEventConsumed if needed\n                event.performOnEventConsumed();\n            }\n        }\n    }\n\n}\n</code></pre> <pre><code>@Service\nclass AnyService : TestEventsCollector {\n\n    override fun onEventCollected(event: TestApplicationEvent) {\n        // get the extra arguments from the event\n        val extra: Array&lt;Any&gt; = event.extra\n\n        // handle the specific type of the event collected\n        when (event.eventType) {\n            TestEvent.EVENT_ONE -&gt; {\n                println(\"EVENT_ONE collected!\")\n\n                // perform the OnEventConsumed if needed\n                event.performOnEventConsumed()\n            }\n            TestEvent.EVENT_TWO -&gt; {\n                println(\"EVENT_TWO collected!\")\n\n                // perform the OnEventConsumed if needed\n                event.performOnEventConsumed()\n            }\n        }\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxItemsHelper/","title":"EquinoxItemsHelper","text":"<p>This API allows to execute batch queries such insertion, deletion and synchronization dynamically</p>"},{"location":"backend/APIs/EquinoxItemsHelper/#implementation","title":"Implementation","text":"<p>Create the service</p> JavaKotlin <pre><code>@Service\npublic class CarsService extends EquinoxItemsHelper { // make extends the class with EquinoxItemsHelper\n\n    private static final String CARS_TABLE = \"cars\";\n\n    private static final String OWNER_COLUMN = \"owner\";\n\n    private static final String MODEL_COLUMN = \"model\";\n\n    @Autowired\n    private CarsRepository repository;\n\n}\n</code></pre> <pre><code>@Service\nclass CarsService : EquinoxItemsHelper() { // make extends the class with EquinoxItemsHelper\n\n    companion object {\n        private const val CARS_TABLE = \"cars\"\n        private const val OWNER_COLUMN = \"owner\"\n        private const val MODEL_COLUMN = \"model\"\n    }\n\n    @Autowired\n    private lateinit var repository: CarsRepository\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxItemsHelper/#usage","title":"Usage","text":""},{"location":"backend/APIs/EquinoxItemsHelper/#insert-in-batch","title":"Insert in batch","text":"<p>Use the <code>batchInsert</code> method to insert multiple cars in the same query</p> JavaKotlin <pre><code>public void insertCars(String ownerId, ArrayList&lt;String&gt; cars) {\n    InsertCommand command = INSERT_INTO; // INSERT_IGNORE_INTO, REPLACE_INTO\n    batchInsert(command, CARS_TABLE, new BatchQuery&lt;String&gt;() {\n        @Override\n        public List&lt;String&gt; getData() {\n        // useful if you need to filter values to insert\n        return cars;\n        }\n\n        @Override\n        public void prepareQuery(Query query, int index, List&lt;String&gt; cars) {\n            for (String car : cars) {\n                // the order of the parameters setting is the same of the table\n                query.setParameter(index++, ownerId);\n                query.setParameter(index++, car);\n            }\n        }\n\n        @Override\n        public String[] getColumns() {\n            // the order of the columns matches the one of the table\n            return new String[]{OWNER_COLUMN, MODEL_COLUMN};\n        }\n    });\n}\n</code></pre> <pre><code>fun insertCars(\n    ownerId: String,\n    cars: ArrayList&lt;String&gt;\n) {\n    val command = INSERT_INTO // INSERT_IGNORE_INTO, REPLACE_INTO\n    batchInsert(command, CARS_TABLE, object : BatchQuery&lt;String&gt; {\n        override fun getData(): List&lt;String&gt; {\n            // useful if you need to filter values to insert\n            return cars\n        }\n\n        override fun prepareQuery(\n            query: Query, \n            index: Int, \n            cars: List&lt;String&gt;\n        ) {\n            for (car in cars) {\n                // the order of the parameters setting is the same of the table\n                query.setParameter(index++, ownerId)\n                query.setParameter(index++, car)\n            }\n        }\n\n        override fun getColumns(): Array&lt;String&gt; {\n            // the order of the columns matches the one of the table\n            return arrayOf(OWNER_COLUMN, MODEL_COLUMN)\n        }\n    })\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxItemsHelper/#synchronize-data","title":"Synchronize data","text":"<p>Use the <code>syncBatch</code> method to execute a batch synchronization of the data, you can also create a dedicated procedure using the BatchSynchronizationProcedure API class</p>"},{"location":"backend/APIs/EquinoxItemsHelper/#simple-objects","title":"Simple objects","text":"<p>With simple object such <code>String</code>, <code>int</code>, <code>double</code>, etc... you can use the method as follows:</p> JavaKotlin <pre><code>public void updateCars(String ownerId, ArrayList&lt;String&gt; cars) {\n    SyncBatchModel model = new SyncBatchModel() {\n        @Override\n        public ArrayList&lt;String&gt; getCurrentData() {\n            // logic to fetch the current cars of the owner\n            return currentData;\n        }\n\n        @Override\n        public String[] getDeletingColumns() {\n            // the order of the columns matches the one of the table\n            return new String[]{OWNER_COLUMN, MODEL_COLUMN};\n        }\n\n        // not mandatory\n        @Override\n        public void afterSync() {\n            // execute after the synchronization completed \n        }\n    };\n\n    BatchQuery batchQuery = new BatchQuery&lt;String&gt;() {\n        @Override\n        public List&lt;String&gt; getData() {\n            // useful if you need to filter values to insert\n            return cars;\n        }\n\n        @Override\n        public void prepareQuery(Query query, int index, List&lt;String&gt; cars) {\n            for (String car : cars) {\n                // the order of the parameters setting is the same of the table\n                query.setParameter(index++, ownerId);\n                query.setParameter(index++, car);\n            }\n        }\n\n        @Override\n        public String[] getColumns() {\n            // the order of the columns matches the one of the table\n            return new String[]{OWNER_COLUMN, MODEL_COLUMN};\n        }\n    };\n\n    syncBatch(model, CARS_TABLE, batchQuery);\n} \n</code></pre> <pre><code>fun updateCars(\n    ownerId: String,\n    cars: ArrayList&lt;String&gt;\n) {\n    val model = object : SyncBatchModel {\n\n        override fun getCurrentData(): ArrayList&lt;String&gt; {\n            // logic to fetch the current cars of the owner\n            return currentData\n        }\n\n        override fun getDeletingColumns(): Array&lt;String&gt; {\n            // the order of the columns matches the one of the table\n            return arrayOf(OWNER_COLUMN, MODEL_COLUMN)\n        }\n\n        // not mandatory\n        override fun afterSync() {\n            // execute after the synchronization completed \n        }\n\n    }\n\n    val batchQuery = object : BatchQuery&lt;String&gt; {\n\n        override fun getData(): List&lt;String&gt; {\n            // useful if you need to filter values to insert\n            return cars\n        }\n\n        override fun prepareQuery(\n            query: Query,\n            index: Int,\n            cars: List&lt;String&gt;\n        ) {\n            for (car in cars) {\n                // the order of the parameters setting is the same of the table\n                query.setParameter(index++, ownerId)\n                query.setParameter(index++, car)\n            }\n        }\n\n        override fun getColumns(): Array&lt;String&gt; {\n            // the order of the columns matches the one of the table\n            return arrayOf(OWNER_COLUMN, MODEL_COLUMN)\n        }\n\n    }\n\n    syncBatch(model, CARS_TABLE, batchQuery)\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxItemsHelper/#complex-objects","title":"Complex objects","text":"<p>With complex object such custom classes, etc... you can use the method as follows:</p>"},{"location":"backend/APIs/EquinoxItemsHelper/#custom-object-example","title":"Custom object example","text":"JavaKotlin <pre><code>public class Car {\n\n    private String model;\n\n    private String plate;\n\n    public Car(String model, String plate) {\n        this.model = model;\n        this.plate = plate;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public String getPlate() {\n        return plate;\n    }\n\n    // required the custom equals implementation to correctly synchronize complex objects\n    @Override\n    public boolean equals(Object o) {\n        if (o == null || getClass() != o.getClass()) return false;\n\n        Car car = (Car) o;\n        return Objects.equals(model, car.model) &amp;&amp; Objects.equals(plate, car.plate);\n    }\n\n    // required the custom hashCode implementation to correctly synchronize complex objects\n    @Override\n    public int hashCode() {\n        int result = Objects.hashCode(model);\n        result = 31 * result + Objects.hashCode(plate);\n        return result;\n    }\n\n} \n</code></pre> <pre><code>class Car(\n    val model: String,\n    val plate: String\n) {\n\n    // required the custom equals implementation to correctly synchronize complex objects\n    override fun equals(other: Any?): Boolean {\n        if (other == null || this::class != other::class) return false\n\n        other as Car\n        return model == other.model &amp;&amp; plate == other.plate\n    }\n\n    // required the custom hashCode implementation to correctly synchronize complex objects\n    override fun hashCode(): Int {\n        var result = model.hashCode()\n        result = 31 * result + plate.hashCode()\n        return result\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxItemsHelper/#map-the-custom-object-with-the-data-to-use-during-the-synchronization","title":"Map the custom object with the data to use during the synchronization","text":"<ul> <li>Using <code>ComplexBatchItem</code> interface</li> </ul> JavaKotlin <pre><code>// implement this interface to do that mapping\npublic class Car implements ComplexBatchItem {\n\n    private String model;\n\n    private String plate;\n\n    public Car(String model, String plate) {\n        this.model = model;\n        this.plate = plate;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public String getPlate() {\n        return plate;\n    }\n\n    // required the custom equals implementation to correctly synchronize complex objects\n    @Override\n    public boolean equals(Object o) {\n        if (o == null || getClass() != o.getClass()) return false;\n\n        Car car = (Car) o;\n        return Objects.equals(model, car.model) &amp;&amp; Objects.equals(plate, car.plate);\n    }\n\n    // required the custom hashCode implementation to correctly synchronize complex objects\n    @Override\n    public int hashCode() {\n        int result = Objects.hashCode(model);\n        result = 31 * result + Objects.hashCode(plate);\n        return result;\n    }\n\n    // this will allow the automatically mapping of the custom value to use during the synchronization\n    @Override\n    public List&lt;?&gt; mappedValues() {\n        ArrayList&lt;String&gt; custom = new ArrayList&lt;&gt;();\n        custom.add(plate);\n        custom.add(model);\n        return custom;\n    }\n\n}\n</code></pre> <pre><code>// implement this interface to do that mapping\nclass Car(\n    val model: String,\n    val plate: String\n) : ComplexBatchItem {\n\n    // required the custom equals implementation to correctly synchronize complex objects\n    override fun equals(other: Any?): Boolean {\n        if (other == null || this::class != other::class) return false\n\n        other as Car\n        return model == other.model &amp;&amp; plate == other.plate\n    }\n\n    // required the custom hashCode implementation to correctly synchronize complex objects\n    override fun hashCode(): Int {\n        var result = model.hashCode()\n        result = 31 * result + plate.hashCode()\n        return result\n    }\n\n    // this will allow the automatically mapping of the custom value to use during the synchronization\n    override fun mappedValues(): List&lt;*&gt; {\n        val custom = ArrayList&lt;String&gt;()\n        custom.add(plate)\n        custom.add(model)\n        return custom\n    }\n\n}\n</code></pre> <ul> <li>Using <code>JoinTableSyncBatchItem</code> wrapper class for the queries which operate with join tables</li> </ul> JavaKotlin <pre><code>JoinTableSyncBatchItem&lt;String, String&gt; joinTableItem = new JoinTableSyncBatchItem&lt;&gt;(\n    \"owner_id\",\n    \"owned_id\"\n);\n</code></pre> <pre><code>val joinTableItem: JoinTableSyncBatchItem&lt;String, String&gt; = JoinTableSyncBatchItem&lt;&gt;(\n    \"owner_id\",\n    \"owned_id\"\n)\n</code></pre>"},{"location":"backend/APIs/EquinoxItemsHelper/#execute-the-synchronization","title":"Execute the synchronization","text":"<p>To execute the synchronization with the complex objects the procedure is the same for the simple objects, but you can just use the logic of your custom complex object to create the <code>SyncBatchModel</code> and the related <code>BatchQuery</code></p>"},{"location":"backend/APIs/EquinoxItemsHelper/#delete-in-batch","title":"Delete in batch","text":"<p>Use the <code>batchDelete</code> method to delete in batch the data</p>"},{"location":"backend/APIs/EquinoxItemsHelper/#simple-objects_1","title":"Simple objects","text":"<p>With simple object such <code>String</code>, <code>int</code>, <code>double</code>, etc... you can use the method as follows:</p> JavaKotlin <pre><code>public void deleteCars(List&lt;String&gt; carsToDelete) {\n    batchDelete(CARS_TABLE, carsToDelete, MODEL_COLUMN, etc..);\n}\n</code></pre> <pre><code>fun deleteCars(\n    carsToDelete: List&lt;String&gt;\n) {\n    batchDelete(CARS_TABLE, carsToDelete, MODEL_COLUMN /*, etc.. */)\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxItemsHelper/#complex-objects_1","title":"Complex objects","text":"<p>With complex objects such custom classes, etc... you can use the method as follows:</p>"},{"location":"backend/APIs/EquinoxItemsHelper/#custom-object-example_1","title":"Custom object example","text":"JavaKotlin <pre><code>public class Car {\n\n    private String model;\n\n    private String plate;\n\n    public Car(String model, String plate) {\n        this.model = model;\n        this.plate = plate;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public String getPlate() {\n        return plate;\n    }\n\n    // required the custom equals implementation to correctly synchronize complex objects\n    @Override\n    public boolean equals(Object o) {\n        if (o == null || getClass() != o.getClass()) return false;\n\n        Car car = (Car) o;\n        return Objects.equals(model, car.model) &amp;&amp; Objects.equals(plate, car.plate);\n    }\n\n    // required the custom hashCode implementation to correctly synchronize complex objects\n    @Override\n    public int hashCode() {\n        int result = Objects.hashCode(model);\n        result = 31 * result + Objects.hashCode(plate);\n        return result;\n    }\n\n} \n</code></pre> <pre><code>class Car(\n    val model: String,\n    val plate: String\n) {\n\n    // required the custom equals implementation to correctly synchronize complex objects\n    override fun equals(other: Any?): Boolean {\n        if (other == null || this::class != other::class) return false\n\n        other as Car\n        return model == other.model &amp;&amp; plate == other.plate\n    }\n\n    // required the custom hashCode implementation to correctly synchronize complex objects\n    override fun hashCode(): Int {\n        var result = model.hashCode()\n        result = 31 * result + plate.hashCode()\n        return result\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxItemsHelper/#map-the-custom-object-with-the-data-to-use-during-the-deletion","title":"Map the custom object with the data to use during the deletion","text":"<ul> <li>Using <code>ComplexBatchItem</code> interface</li> </ul> JavaKotlin <pre><code>// implement this interface to do that mapping\npublic class Car implements ComplexBatchItem {\n\n    private String model;\n\n    private String plate;\n\n    public Car(String model, String plate) {\n        this.model = model;\n        this.plate = plate;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public String getPlate() {\n        return plate;\n    }\n\n    // required the custom equals implementation to correctly synchronize complex objects\n    @Override\n    public boolean equals(Object o) {\n        if (o == null || getClass() != o.getClass()) return false;\n\n        Car car = (Car) o;\n        return Objects.equals(model, car.model) &amp;&amp; Objects.equals(plate, car.plate);\n    }\n\n    // required the custom hashCode implementation to correctly synchronize complex objects\n    @Override\n    public int hashCode() {\n        int result = Objects.hashCode(model);\n        result = 31 * result + Objects.hashCode(plate);\n        return result;\n    }\n\n    // this will allow the automatically mapping of the custom value to use during the synchronization\n    @Override\n    public List&lt;?&gt; mappedValues() {\n        ArrayList&lt;String&gt; custom = new ArrayList&lt;&gt;();\n        custom.add(plate);\n        custom.add(model);\n        return custom;\n    }\n\n}\n</code></pre> <pre><code>// implement this interface to do that mapping\nclass Car(\n    val model: String,\n    val plate: String\n) : ComplexBatchItem {\n\n    // required the custom equals implementation to correctly synchronize complex objects\n    override fun equals(other: Any?): Boolean {\n        if (other == null || this::class != other::class) return false\n\n        other as Car\n        return model == other.model &amp;&amp; plate == other.plate\n    }\n\n    // required the custom hashCode implementation to correctly synchronize complex objects\n    override fun hashCode(): Int {\n        var result = model.hashCode()\n        result = 31 * result + plate.hashCode()\n        return result\n    }\n\n    // this will allow the automatically mapping of the custom value to use during the synchronization\n    override fun mappedValues(): List&lt;*&gt; {\n        val custom = ArrayList&lt;String&gt;()\n        custom.add(plate)\n        custom.add(model)\n        return custom\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/EquinoxItemsHelper/#execute-the-batch-delete","title":"Execute the batch delete","text":"JavaKotlin <pre><code>public void deleteCars(List&lt;Car&gt; carsToDelete) {\n    batchDelete(CARS_TABLE, carsToDelete, PLATE_COLUMN, MODEL_COLUMN);\n}\n</code></pre> <pre><code>fun deleteCars(\n    carsToDelete: List&lt;Car&gt;\n) {\n    batchDelete(CARS_TABLE, carsToDelete, PLATE_COLUMN, MODEL_COLUMN)\n}\n</code></pre>"},{"location":"backend/APIs/FilteredQuery/","title":"FilteredQuery","text":"<p>This API allows to create dynamic queries with filter parameters leveraging regex expressions.</p> <p>Under the hood, it uses the CriteriaBuilder API, making it particularly useful for building complex queries with multiple filters that can be easily applied.</p>"},{"location":"backend/APIs/FilteredQuery/#implementation","title":"Implementation","text":""},{"location":"backend/APIs/FilteredQuery/#create-your-own-filteredquery-instance","title":"Create your own FilteredQuery instance","text":"<p>You need to create your own <code>FilteredQuery</code> instance by specifying the object (entity) on which the queries will operate</p> JavaKotlin <pre><code>public class CarsQuery extends FilteredQuery&lt;Car&gt; { // your entity\n\n    public CarsQuery(Class&lt;Car&gt; entityType, EntityManager entityManager, Set&lt;String&gt; rawFilters) {\n        super(entityType, entityManager, rawFilters);\n    }\n\n    ...\n\n}\n</code></pre> <pre><code>class CarsQuery(\n    entityType: Class&lt;Car&gt;,\n    entityManager: EntityManager,\n    rawFilters: Set&lt;String&gt;\n) : FilteredQuery&lt;Car&gt;( // your entity\n    entityType, \n    entityManager,\n    rawFilters\n) {\n    ...\n}\n</code></pre>"},{"location":"backend/APIs/FilteredQuery/#create-the-regex-for-the-filter-you-want-to-use","title":"Create the regex for the filter you want to use","text":"<p>The regular expression will be used to filter the raw data and correctly assign each value to its corresponding category</p> JavaKotlin <pre><code>private static final String MODEL_REGEX = // the regex to use to extract from the raw filters the matching model names\n\nprivate static final Pattern MODEL_PATTERN = // pattern use to match the raw filters    \n</code></pre> <pre><code>companion object {\n    private const val MODEL_REGEX: String = // the regex to use to extract from the raw filters the matching model names\n\n    private val MODEL_PATTERN: Regex = Regex(MODEL_REGEX) // used to match the raw filters    \n}\n</code></pre>"},{"location":"backend/APIs/FilteredQuery/#override-fillpredicates-method","title":"Override fillPredicates method","text":"<p>In this way you can invoke your custom filters methods</p> JavaKotlin <pre><code>@Override\nprotected void fillPredicates() {\n    addModelNameFilters();\n}\n</code></pre> <pre><code>override fun fillPredicates() {\n    addModelNameFilters()\n}\n</code></pre>"},{"location":"backend/APIs/FilteredQuery/#use-the-custom-filters","title":"Use the custom filters","text":"Extract the specific filters <p>Pass the <code>MODEL_PATTERN</code> to the provided <code>extractFiltersByPattern</code> method to extract the specific filters</p> JavaKotlin <pre><code>@FiltersExtractor\nprivate HashSet&lt;String&gt; getModelNameFilters() {\n    return extractFiltersByPattern(MODEL_PATTERN);\n}\n</code></pre> <pre><code>@FiltersExtractor\nprivate fun getModelNameFilters() : HashSet&lt;String&gt; {\n    return extractFiltersByPattern(MODEL_PATTERN)\n}\n</code></pre> Add the extracted filters <p>Create a predicate with the extracted filter and add to the inherited <code>predicates</code> to correctly perform the query</p> JavaKotlin <pre><code>@FiltersAdder\nprivate void addModelNameFilters() {\n    Set&lt;String&gt; names = getModelNameFilters();\n    if (names != null) {\n        Predicate nameIn = root.get(\"model\").in(names);\n        predicates.add(nameIn); // add the created predicate to the predicates list\n    }\n}\n</code></pre> <pre><code>@FiltersAdder\nfun addModelNameFilters() {\n    val names: Set&lt;String&gt;? = getModelNameFilters()\n    names?.let {\n        val nameIn = root.get&lt;String&gt;(\"model\").`in`(it)\n        predicates.add(nameIn) // add the created predicate to the predicates list\n    }\n}\n</code></pre>"},{"location":"backend/APIs/FilteredQuery/#usage","title":"Usage","text":"<p>You can execute the filtered query from a service as follows:</p> JavaKotlin <pre><code>@Service\n@Transactional // required\npublic class CarsService {\n\n    // instantiate a custom entity manager\n    @PersistenceContext\n    protected EntityManager entityManager;\n\n    public List&lt;Car&gt; filterCars(Set&lt;String&gt; rawFilters) {\n        CarsQuery carsQuery = new CarsQuery(\n                Car.class,\n                entityManager,\n                rawFilters\n        );\n        return carsQuery.getEntities(); // execute the query and return the results\n    }\n\n}\n</code></pre> <pre><code>@Service\n@Transactional // Required for transactional operations\nclass CarsService {\n\n    // Inject a custom entity manager\n    @PersistenceContext\n    protected lateinit var entityManager: EntityManager\n\n    fun filterCars(rawFilters: Set&lt;String&gt;): List&lt;Car&gt; {\n        val carsQuery = CarsQuery(\n            Car::class.java,\n            entityManager,\n            rawFilters\n        )\n        return carsQuery.entities // Execute the query and return the results\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/FilteredQuery/#overview","title":"Overview","text":"<p>The completed implementation is the following:</p> JavaKotlin <pre><code>public class CarsQuery extends FilteredQuery&lt;Car&gt; { // your entity\n\n    private static final String MODEL_REGEX = // the regex to use to extract from the raw filters the matching model names\n\n    private static final Pattern MODEL_PATTERN = // pattern use to match the raw filters   \n\n    public CarsQuery(Class&lt;Car&gt; entityType, EntityManager entityManager, Set&lt;String&gt; rawFilters) {\n        super(entityType, entityManager, rawFilters);\n    }\n\n    @Override\n    protected void fillPredicates() {\n        addModelNameFilters();\n    }\n\n    @FiltersExtractor\n    private HashSet&lt;String&gt; getModelNameFilters() {\n        return extractFiltersByPattern(MODEL_PATTERN);\n    }\n\n    @FiltersAdder\n    private void addModelNameFilters() {\n        HashSet&lt;String&gt; names = getModelNameFilters();\n        if (names != null) {\n            Predicate nameIn = root.get(\"model\").in(names);\n            predicates.add(nameIn); // add the created predicate to the predicates list\n        }\n    }\n\n}\n</code></pre> <pre><code>class CarsQuery(\n    entityType: Class&lt;Car&gt;,\n    entityManager: EntityManager,\n    rawFilters: Set&lt;String&gt;\n) : FilteredQuery&lt;Car&gt;( // your entity\n    entityType, \n    entityManager,\n    rawFilters\n) {\n\n    companion object {\n        private const val MODEL_REGEX: String = // the regex to use to extract from the raw filters the matching model names\n\n        private val MODEL_PATTERN: Regex = Regex(MODEL_REGEX) // used to match the raw filters    \n    }   \n\n    override fun fillPredicates() {\n        addModelNameFilters()\n    }\n\n    @FiltersExtractor\n    private fun getModelNameFilters() : HashSet&lt;String&gt; {\n        return extractFiltersByPattern(MODEL_PATTERN)\n    }\n\n    @FiltersAdder\n    fun addModelNameFilters() {\n        val names: Set&lt;String&gt;? = getModelNameFilters()\n        names?.let {\n            val nameIn = root.get&lt;String&gt;(\"model\").`in`(it)\n            predicates.add(nameIn) // add the created predicate to the predicates list\n        }\n    }\n\n}\n</code></pre>"},{"location":"backend/APIs/IndexesCreator/","title":"IndexesCreator","text":"<p>This API makes it easy to create various types of indexes for any table in your database</p>"},{"location":"backend/APIs/IndexesCreator/#usage","title":"Usage","text":""},{"location":"backend/APIs/IndexesCreator/#create-your-own-indexescreator-instance","title":"Create your own IndexesCreator instance","text":"<p>You need to create your own <code>IndexesCreator</code> instance and annotate is as <code>@Component</code>:</p> JavaKotlin <pre><code>@Component // this annotation is required to enable the Spring Boot's mapping\npublic class CustomFullTextIndexCreator extends IndexesCreator {\n\n}\n</code></pre> <pre><code>@Component // this annotation is required to enable the Spring Boot's mapping\nclass CustomFullTextIndexCreator : IndexesCreator() {\n\n}\n</code></pre>"},{"location":"backend/APIs/IndexesCreator/#declare-index-fields","title":"Declare index fields","text":"<p>To create the index you have to declare which column of the table made up that index</p> JavaKotlin <pre><code>private final List&lt;String&gt; INDEX_FIELDS = List.of(\"a\", \"b\");\n</code></pre> <pre><code>private val INDEX_FIELDS: List&lt;String&gt; = listOf(\"a\", \"b\")\n</code></pre>"},{"location":"backend/APIs/IndexesCreator/#create-the-indexes","title":"Create the indexes","text":"<p>Override the <code>createIndexes</code> method and invoke either the provided methods from <code>IndexesCreator</code> or your own custom methods to create indexes</p> JavaKotlin <pre><code>@Override\n@PostConstruct // this annotation is required to enable automatically its invocation by Spring Boot\npublic void createIndexes() {\n    // invoke your custom methods to create your own indexes\n    createCustomFullTextIndex();\n}\n\n@Wrapper // not mandatory, but suggested for a better readability\nprivate void createCustomFullTextIndex() {\n    // create your own custom index\n    createFullTextIndex(\"table\", \"index_name\", INDEX_FIELDS);\n}\n</code></pre> <pre><code>@PostConstruct // this annotation is required to enable automatically its invocation by Spring Boot\noverride fun createIndexes() {\n    // invoke your custom methods to create your own indexes\n    createCustomFullTextIndex()\n}\n\n@Wrapper // not mandatory, but suggested for a better readability\nprivate fun createCustomFullTextIndex() {\n    // create your own custom index\n    createFullTextIndex(\"table\", \"index_name\", INDEX_FIELDS)\n} \n</code></pre>"},{"location":"backend/APIs/IndexesCreator/#overview","title":"Overview","text":"<p>The completed implementation is the following:</p> JavaKotlin <pre><code>public class CustomFullTextIndexCreator extends IndexesCreator {\n\n    private final List&lt;String&gt; INDEX_FIELDS = List.of(\"a\", \"b\");\n\n    @Override\n    @PostConstruct // this annotation is required to enable automatically its invocation by Spring Boot\n    public void createIndexes() {\n        // invoke your custom methods to create your own indexes\n        createCustomFullTextIndex();\n    }\n\n    @Wrapper // not mandatory, but suggested for a better readability\n    private void createCustomFullTextIndex() {\n        // create your own custom index\n        createFullTextIndex(\"table\", \"index_name\", INDEX_FIELDS);\n    }\n\n}\n</code></pre> <pre><code>@Component\nclass CustomFullTextIndexCreator : IndexesCreator() {\n\n    private val INDEX_FIELDS: List&lt;String&gt; = listOf(\"a\", \"b\")\n\n    @PostConstruct // this annotation is required to enable automatically its invocation by Spring Boot\n    override fun createIndexes() {\n        // invoke your custom methods to create your own indexes\n        createCustomFullTextIndex()\n    }\n\n    @Wrapper // not mandatory, but suggested for a better readability\n    private fun createCustomFullTextIndex() {\n        // create your own custom index\n        createFullTextIndex(\"table\", \"index_name\", INDEX_FIELDS)\n    }            \n\n}\n</code></pre>"},{"location":"backend/APIs/IndexesCreator/#provided-indexes-methods","title":"Provided indexes methods","text":"<ul> <li>Use the <code>createFullTextIndex</code> method to create   a Full Text Search   index</li> </ul>"},{"location":"backend/APIs/ResourcesProvider/","title":"ResourcesProvider","text":"<p>Provides an easy way to handle the static resources used by the backend such images, assets, etc</p>"},{"location":"backend/APIs/ResourcesProvider/#usage","title":"Usage","text":""},{"location":"backend/APIs/ResourcesProvider/#initialize-the-provider","title":"Initialize the provider","text":"JavaKotlin <pre><code>ResourcesProvider resourcesProvider = new ResourcesProvider(\n    \"containerFolder_1\",\n    List.of(\"subfolder_1\", \"subfolder_2\")\n);\n</code></pre> <pre><code>val resourcesProvider = ResourcesProvider(\n    \"containerFolder_1\",\n    listOf(\"subfolder_1\", \"subfolder_2\")\n)\n</code></pre>"},{"location":"backend/APIs/ResourcesProvider/#create-directories","title":"Create directories","text":"<p>Before is required to create the container directory which will contain other directories:</p> JavaKotlin <pre><code>resourcesProvider.createContainerDirectory();\n</code></pre> <pre><code>resourcesProvider.createContainerDirectory()\n</code></pre> <p>Then can be created the subdirectories:</p> JavaKotlin <pre><code>resourcesProvider.createSubDirectories();\n</code></pre> <pre><code>resourcesProvider.createSubDirectories()\n</code></pre> <p>Final structure:</p> <pre><code>containerFolder_1\n\u251c\u2500\u2500 subfolder_1\n\u2514\u2500\u2500 subfolder_2\n</code></pre>"},{"location":"backend/APIs/SQLConstants/","title":"SQLConstants","text":"<p>Is a collection of constants used in the SQL context.</p> <p>The naming convention for those constants which are part of query such where, values, etc... is: the underscore character (<code>_</code>) stands for <code>whitespace</code>, so the <code>_WHERE_</code> constant value is:  <code>WHERE</code></p>"},{"location":"backend/APIs/SQLConstants/#provided-constants","title":"Provided constants","text":"Key Value SINGLE_QUOTE <code>'</code> OPENED_ROUND_BRACKET <code>(</code> CLOSED_ROUND_BRACKET <code>)</code> COMMA <code>,</code> QUESTION_MARK <code>?</code> DELETE_FROM_ <code>DELETE FROM</code> _VALUES_ <code>VALUES</code> _WHERE_ <code>WHERE</code> _IN_CLAUSE_ <code>IN</code> ALTER_TABLE_ <code>ALTER TABLE</code> SHOW_INDEX_FROM_ <code>SHOW INDEX FROM</code> _ADD_FULLTEXT_INDEX_ <code>ADD FULLTEXT INDEX %s (</code> _IN_NATURAL_LANGUAGE_MODE <code>IN NATURAL LANGUAGE MODE</code> _IN_BOOLEAN_MODE <code>IN BOOLEAN MODE</code>"},{"location":"backend/Annotations/BatchQueryImpl/","title":"BatchQueryImpl","text":"<p>This annotation is useful to indicate an implementation of BatchQuery</p>"},{"location":"backend/Annotations/BatchQueryImpl/#usage","title":"Usage","text":"JavaKotlin <pre><code>@BatchQueryImpl(\n    // not mandatory\n    description = \"\"\"\n        Informative description about the behavior of the implemented batch query\"\n    \"\"\" // suggested text block\n)\npublic class SimpleBatchQuery implements EquinoxItemsHelper.BatchQuery&lt;Simple&gt; {\n\n    ...\n}\n</code></pre> <pre><code>@BatchQueryImpl(\n    // not mandatory\n    description = \"\"\"\n        Informative description about the behavior of the implemented batch query\"\n    \"\"\" // suggested text block\n)\nclass SimpleBatchQuery : EquinoxItemsHelper.BatchQuery&lt;Simple&gt; {\n\n    ...\n}\n</code></pre>"},{"location":"backend/Annotations/BatchQueryItem/","title":"BatchQueryItem","text":"<p>This annotation is useful to indicate an object which its scope is the support to handle the data and manipulate them  during the batch operations</p>"},{"location":"backend/Annotations/BatchQueryItem/#usage","title":"Usage","text":"JavaKotlin <pre><code>@BatchQueryItem(\n    // not mandatory\n    description = \"\"\"\n        Informative description about the scope of the this item, \n        such the operation where is used what data are manipulated, etc...\n        \"\"\" // suggested text block\n)\npublic class SimpleItem {\n\n    private final String id;\n\n    private final String ownedEntityId;\n\n    ... rest of the item ...\n\n}\n</code></pre> <pre><code>@BatchQueryItem(\n    // not mandatory\n    description = \"\"\"\n        Informative description about the scope of the this item, \n        such the operation where is used what data are manipulated, etc...\n        \"\"\" // suggested text block\n)\nclass SimpleItem(\n\n    private val id: String,\n\n    private val ownedEntityId: String\n\n    // ... rest of the item ...\n\n)\n</code></pre>"},{"location":"backend/Annotations/BatchSyncProcedureImpl/","title":"BatchSyncProcedureImpl","text":"<p>This annotation is useful to annotation is useful to indicate an implementation of a BatchSynchronizationProcedure</p>"},{"location":"backend/Annotations/BatchSyncProcedureImpl/#usage","title":"Usage","text":"JavaKotlin <pre><code>@BatchSyncProcedureImpl(\n    // not mandatory\n    description = \"\"\"\n        Informative description about the behavior of the implemented procedure\"\n        \"\"\" // suggested text block\n)\npublic class SimpleBatchQuerySyncProcedure extends BatchSynchronizationProcedure&lt;Integer, String, SimpleCalendarBatchItem&gt; {\n\n    // ... rest of the procedure ...\n\n}\n</code></pre> <pre><code>@BatchSyncProcedureImpl(\n    // not mandatory\n    description = \"\"\"\n        Informative description about the behavior of the implemented procedure\"\n        \"\"\" // suggested text block\n)\nclass SimpleBatchQuerySyncProcedure : BatchSynchronizationProcedure&lt;Int, String, SimpleCalendarBatchItem&gt;() {\n\n    // ... rest of the procedure ...\n\n}\n</code></pre>"},{"location":"backend/Annotations/EmptyConstructor/","title":"EmptyConstructor","text":"<p>This annotation is used to mark the default constructors required for the Spring Boot entities management</p>"},{"location":"backend/Annotations/EmptyConstructor/#usage","title":"Usage","text":"JavaKotlin <pre><code>// this constructor is used by Spring Boot to initialize autonomously the EquinoxUser entity\n@EmptyConstructor\npublic EquinoxUser() {\n    this(null, null, null, null, null, null, null);\n}\n\npublic EquinoxUser(String id, String token, String name, String surname, String email, String password, String language) {\n    this(id, token, name, surname, email, password, DEFAULT_PROFILE_PIC, language);\n}\n\npublic EquinoxUser(String id, String token, String name, String surname, String email, String password, String profilePic,\n                    String language) {\n    super(id);\n    this.token = token;\n    this.name = name;\n    this.surname = surname;\n    this.email = email;\n    this.password = password;\n    this.profilePic = profilePic;\n    this.language = language;\n}\n\npublic EquinoxUser(JSONObject jUser) {\n    super(jUser);\n    token = hItem.getString(TOKEN_KEY);\n    name = hItem.getString(NAME_KEY);\n    surname = hItem.getString(SURNAME_KEY);\n    email = hItem.getString(EMAIL_KEY);\n    password = hItem.getString(PASSWORD_KEY);\n    profilePic = hItem.getString(PROFILE_PIC_KEY);\n    language = hItem.getString(LANGUAGE_KEY);\n}\n</code></pre> <pre><code>// this constructor is used by Spring Boot to initialize autonomously the EquinoxUser entity\n@EmptyConstructor\nconstructor() : this(null, null, null, null, null, null, null)\n\nconstructor(\n    id: String?, token: String?, name: String?, surname: String?,\n    email: String?, password: String?, language: String?\n) : this(id, token, name, surname, email, password, DEFAULT_PROFILE_PIC, language)\n\nconstructor(\n    id: String?, token: String?, name: String?, surname: String?,\n    email: String?, password: String?, profilePic: String?, language: String?\n) : super(id) {\n    this.token = token\n    this.name = name\n    this.surname = surname\n    this.email = email\n    this.password = password\n    this.profilePic = profilePic\n    this.language = language\n}\n\nconstructor(jUser: JSONObject) : super(jUser) {\n    token = hItem.getString(TOKEN_KEY)\n    name = hItem.getString(NAME_KEY)\n    surname = hItem.getString(SURNAME_KEY)\n    email = hItem.getString(EMAIL_KEY)\n    password = hItem.getString(PASSWORD_KEY)\n    profilePic = hItem.getString(PROFILE_PIC_KEY)\n    language = hItem.getString(LANGUAGE_KEY)\n}\n</code></pre>"},{"location":"backend/Annotations/EventsHandler/","title":"EventsHandler","text":"<p>This annotation is useful to mark classes that handle events, such as EquinoxEventsCollector. Its purpose is to improve the readability of the code</p>"},{"location":"backend/Annotations/EventsHandler/#usage","title":"Usage","text":"JavaKotlin <pre><code>@EventsHandler\npublic interface TestEventsCollector extends EquinoxEventsCollector&lt;TestEvent, TestApplicationEvent&gt; {\n\n     // your custom implementation\n\n}\n</code></pre> <pre><code>@EventsHandler\ninterface TestEventsCollector : EquinoxEventsCollector&lt;TestEvent, TestApplicationEvent&gt; {\n\n    // your custom implementation\n\n}\n</code></pre>"},{"location":"backend/Annotations/EventsNotifier/","title":"EventsNotifier","text":"<p>This annotation is useful to mark classes that send events, such as EquinoxEventsEmitter.  Its purpose is to improve the readability of the code</p>"},{"location":"backend/Annotations/EventsNotifier/#usage","title":"Usage","text":"JavaKotlin <pre><code>@Service // required annotation\n@EventsNotifier\npublic class TestEventsEmitter extends EquinoxEventsEmitter&lt;TestEvent&gt; {\n\n    // your custom implementation\n\n}\n</code></pre> <pre><code>@Service // required annotation\n@EventsNotifier\nclass TestEventsEmitter : EquinoxEventsEmitter&lt;TestEvent&gt;() {\n\n    // your custom implementation\n\n}\n</code></pre>"},{"location":"backend/Annotations/FiltersAdder/","title":"FiltersAdder","text":"<p>This annotation is useful to indicate those methods used to adding the extracted filters to a FilteredQuery</p>"},{"location":"backend/Annotations/FiltersAdder/#usage","title":"Usage","text":"JavaKotlin <pre><code>@FiltersAdder(\n    description = \"Will be added to the query the plates such AA000AA, etc...\"\n)\nprivate void addPlates() {\n    // the rest of the method\n}\n</code></pre> <pre><code>@FiltersAdder(\n    description = \"Will be added to the query the plates such AA000AA, etc...\"\n)\nprivate fun addPlates() {\n    // the rest of the method\n}\n</code></pre>"},{"location":"backend/Annotations/FiltersExtractor/","title":"FiltersExtractor","text":"<p>This annotation is useful to indicate those methods used to extract from the raw filters set the specific set indicates by the method, its main usage is related to the FilteredQuery</p>"},{"location":"backend/Annotations/FiltersExtractor/#usage","title":"Usage","text":"JavaKotlin <pre><code>@FiltersExtractor(\n    description = \"Method used to extracts the plate filters to use\"\n)\nprivate HashSet&lt;String&gt; extractPlateFilters() {\n    return extractFiltersByPattern(your_pattern); // the specific pattern to extract the plates\n}\n</code></pre> <pre><code>@FiltersExtractor(\n    description = \"Method used to extracts the plate filters to use\"\n)\nprivate fun extractPlateFilters(): HashSet&lt;String&gt; {\n    return extractFiltersByPattern(your_pattern) // the specific pattern to extract the plates\n}\n</code></pre>"},{"location":"backend/Annotations/MappingPurpose/","title":"MappingPurpose","text":"<p>This annotation is useful to indicate an unused field in a class declared as Entity. Its purpose is to indicate that the field is used for mapping, in order to create a table or a relationship in the database</p>"},{"location":"backend/Annotations/MappingPurpose/#usage","title":"Usage","text":"JavaKotlin <pre><code>@Entity\npublic class SimpleEntity {\n\n    @Id\n    private final String name;\n\n    // unused field in the class\n    @OneToOne\n    @MappingPurpose // annotate it\n    @JoinColumn(name = \"item_id\")\n    private RelationshipItem item;\n\n    public SimpleEntity(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n}\n</code></pre> <pre><code>import jakarta.persistence.Entity\nimport jakarta.persistence.Id\nimport jakarta.persistence.OneToOne\nimport jakarta.persistence.JoinColumn\n\n@Entity\nclass SimpleEntity(\n    @Id\n    val name: String\n) {\n\n    // unused field in the class\n    @OneToOne\n    @MappingPurpose // annotate it\n    @JoinColumn(name = \"item_id\")\n    var item: RelationshipItem? = null\n\n}\n</code></pre>"},{"location":"backend/Annotations/TableColumns/","title":"TableColumns","text":"<p>This annotation is useful to indicate the columns of a table and which order those columns have in that table. It is particularly useful for those method which have to handling queries, for example the BatchQuery methods</p>"},{"location":"backend/Annotations/TableColumns/#usage","title":"Usage","text":"JavaKotlin <pre><code>BatchQuery&lt;Simple&gt; batchQuery = new BatchQuery&lt;&gt;() {\n\n    @Override\n    @TableColumns(columns = {\"id\", \"simple\", \"week\"})\n    public void prepareQuery(Query query, int index, Collection&lt;Simple&gt; items) {\n        for (Simple item : items) {\n            query.setParameter(index++, item.getId());\n            query.setParameter(index++, item.getSimple());\n            query.setParameter(index++, item.getWeek());\n        }\n    }\n\n    @Override\n    @TableColumns(columns = {\"id\", \"simple\", \"week\"})\n    public String[] getColumns() {\n        return new String[]{\"id\", \"simple\", \"week\"};\n    }\n};\n</code></pre> <pre><code>val batchQuery: BatchQuery&lt;Simple&gt; = object : BatchQuery&lt;Simple&gt; {\n\n    @TableColumns(columns = [\"id\", \"simple\", \"week\"])\n    override fun prepareQuery(query: Query, index: Int, items: Collection&lt;Simple&gt;) {\n        var idx = index\n        for (item in items) {\n            query.setParameter(idx++, item.id)\n            query.setParameter(idx++, item.simple)\n            query.setParameter(idx++, item.week)\n        }\n    }\n\n    @TableColumns(columns = [\"id\", \"simple\", \"week\"])\n    override fun getColumns(): Array&lt;String&gt; {\n        return arrayOf(\"id\", \"simple\", \"week\")\n    }\n}\n</code></pre>"},{"location":"compose/","title":"Overview","text":""},{"location":"compose/#overview","title":"Overview","text":"<p>v1.1.6</p> <p> </p> <p>Utilities for Compose Multiplatform applications such components, APIs for all supported platforms</p>"},{"location":"compose/#implementation","title":"Implementation","text":""},{"location":"compose/#version-catalog","title":"Version catalog","text":"<ul> <li><code>libs.version.toml</code></li> </ul> <pre><code>[versions]\nequinox = \"1.1.7\"\n\n[libraries]\nequinox-compose = { module = \"io.github.n7ghtm4r3:equinox-compose\", version.ref = \"equinox\" }\nequinox-core = { module = \"io.github.n7ghtm4r3:equinox-core\", version.ref = \"equinox\" }\n</code></pre> <ul> <li><code>build.gradle.kts</code></li> </ul> <pre><code>dependencies {\n\n    // implement the compose utilities\n    implementation(libs.equinox.compose)\n\n    // implement the core utilities\n    implementation(libs.equinox.core)\n}\n</code></pre>"},{"location":"compose/#gradle-kotlin","title":"Gradle (Kotlin)","text":"<pre><code>dependencies {\n\n    // implement the compose utilities\n    implementation(\"io.github.n7ghtm4r3:equinox-compose:1.1.7\")\n\n    // implement the core utilities\n    implementation(\"io.github.n7ghtm4r3:equinox-core:1.1.7\")\n}\n</code></pre>"},{"location":"compose/#gradle-groovy","title":"Gradle Groovy","text":"<pre><code>dependencies {\n\n    // implement the compose utilities\n    implementation 'io.github.n7ghtm4r3:equinox-compose:1.1.7'\n\n    // implement the core utilities\n    implementation 'io.github.n7ghtm4r3:equinox-core:1.1.7'\n}\n</code></pre>"},{"location":"compose/#apis-available","title":"APIs available","text":"<ul> <li> <p>EquinoxViewModel provides:</p> <ul> <li> <p>EquinoxAuthViewModel   Prebuilt viewmodel to authenticate the user in the system</p> </li> <li> <p>EquinoxProfileViewModel   Prebuilt viewmodel to manage the user account settings and preferences</p> </li> </ul> </li> <li> <p>EquinoxScreens   APIs used to create screens with lifecycle management similar to Android activities</p> </li> <li> <p>EquinoxWindowKit   APIs useful to handle the responsive layouts</p> </li> <li> <p>EquinoxLocalUser   Helper for managing a local user session in client applications</p> </li> </ul>"},{"location":"compose/#components-available","title":"Components available","text":"Texts <ul> <li> <p>TextDivider Allows to divide sections with a representative text</p> </li> <li> <p>SplitText   Allows the user to insert a split text such OTP codes, PIN or any other texts of this type</p> </li> <li> <p>ExpandableText   Allows to dynamically display a long expanded text initially collapsed</p> </li> <li> <p>ChameleonText   Allows to change the text color dynamically based on the background of the container where the text is above</p> </li> <li> <p>BadgeText   Allows to display a customizable badge in your UI</p> </li> </ul> Inputs <ul> <li> <p>EquinoxInputs   Wrapper components of the official <code>TextField</code> and <code>OutlinedTextField</code> provided by <code>Material</code> which provides same    extra features such input validation or <code>onValue</code> callback behavior defined by default</p> </li> <li> <p>DebouncedInputs   Allow to implement a debounce routine handled when the user stop to typing in the inputs fields</p> </li> </ul> Feedback &amp; Status <ul> <li> <p>EquinoxDialogs   Wrapper components of the official <code>AlertDialog</code> provided by <code>Material</code> with the EquinoxViewModel   lifecycle handling</p> </li> <li> <p>EquinoxUIs    Are prebuilt UIs to display a representative scenario like errors, loadings, etc</p> </li> <li> <p>ProgressBars   Allow to display progress values on bars</p> </li> <li> <p>InformativeIcon   Provides the possibility to display an informative text when the user interact with an icon</p> </li> </ul> Interactive <ul> <li> <p>TabSelector   Custom tab selector allows to select the tab to display</p> </li> <li> <p>Tile   Allows users to quickly understand options and interact with them and can group related actions or information</p> </li> <li> <p>Stepper   Allows to create a dynamic interaction with the user dividing for example a long procedure such item   creation, customization, etc... in different specific steps where the user can interact</p> </li> <li> <p>QuantityPicker   Allows to pick a numerical quantity value</p> </li> </ul> Containers <ul> <li>SessionFlowContainer   Allows to dynamically display the correct content based on the session status</li> </ul>"},{"location":"compose/#annotations-available","title":"Annotations available","text":"<p>This module provides a set of annotations that can be used to improve code readability and maintainability. You can explore them here</p>"},{"location":"compose/APIs/EquinoxLocalUser/","title":"EquinoxLocalUser","text":"<p>This API is useful to represent a user in the client application and to manage his/her session in the client application</p>"},{"location":"compose/APIs/EquinoxLocalUser/#usage","title":"Usage","text":"<p>This API provides the management of the following standard properties:</p> <ul> <li><code>hostAddress</code></li> <li><code>userId</code></li> <li><code>userToken</code></li> <li><code>profilePic</code></li> <li><code>name</code></li> <li><code>surname</code></li> <li><code>email</code></li> <li><code>language</code></li> <li><code>theme</code></li> </ul> <p>It can be extended allowing a full customization based on the local session requirements for each application.</p>"},{"location":"compose/APIs/EquinoxLocalUser/#local-user-lifecycle","title":"Local user lifecycle","text":""},{"location":"compose/APIs/EquinoxLocalUser/#instantiation","title":"Instantiation","text":"<p>Can be created an instance of a new local user as follows:</p> <pre><code>val localUser = EquinoxLocalUser(\n    localStoragePath = \"local store path\"\n)\n</code></pre> <p>Warning</p> <p>It is suggested to not hardcode the <code>localStoragePath</code> value directly, but for example create a property in  <code>gradle.properties</code> file or similar and <code>do not share</code> in public repos</p> <p>The lifecycle of the local user starts when the <code>insertNewUser</code> is invoked, that method locally store and then assign the  values of each property:</p> <pre><code>localUser.insertNewUser(\n    // the standard properties\n)\n</code></pre> <p>Note</p> <p>The <code>insertNewUser</code> method is designed to be invoked when the user signed in or signed up into the application</p>"},{"location":"compose/APIs/EquinoxLocalUser/#updating-existing-properties","title":"Updating existing properties","text":"<p>This API provides a way to dynamically update those properties which have been updated outside this local session, for example on another device with the same local user, this can be done as follows:</p> <pre><code>localUser.updateDynamicAccountData(\n    dynamicData = // a json object with the account data changed\n)\n</code></pre>"},{"location":"compose/APIs/EquinoxLocalUser/#logout","title":"Logout","text":"<p>After the user logout the related information can be removed as follows:</p> <pre><code>localUser.clear()\n</code></pre>"},{"location":"compose/APIs/EquinoxLocalUser/#customization","title":"Customization","text":""},{"location":"compose/APIs/EquinoxLocalUser/#custom-property-integration","title":"Custom property integration","text":"<p>To integrate a custom property, additional to the provided properties, the standard approach is the following one:</p>"},{"location":"compose/APIs/EquinoxLocalUser/#declaring-the-property","title":"Declaring the property","text":"<pre><code>var currency: String? = null\n</code></pre>"},{"location":"compose/APIs/EquinoxLocalUser/#creating-the-initialization-method","title":"Creating the initialization method","text":"<p>It is suggested naming the method which initialize custom properties with the <code>init</code> prefix and the name of the property  as the suffix:</p> <pre><code> fun initCurrency(\n    currency: String?\n) { \n    // initialize the property \n    this.currency = currency\n    // locally save the property\n    savePreference(\n        key = CURRENCY_KEY,\n        value = currency\n    )\n}\n</code></pre> <p>The structure of the method is suggested to have a compact initialization of the property and a locally saving of the preference</p> <p>Note</p> <p>This method can be used to update the value of the property and the related local value currently saved</p>"},{"location":"compose/APIs/EquinoxLocalUser/#adapting-the-insertnewuser-method","title":"Adapting the insertNewUser method","text":"<p>To store and assign the custom property the <code>insertNewUser</code> must be adapted to use that custom property, this can be done as follows:</p> <pre><code>@RequiresSuperCall\noverride fun insertNewUser(\n    hostAddress: String,\n    userId: String,\n    userToken: String,\n    profilePic: String,\n    name: String,\n    surname: String,\n    email: String,\n    language: String,\n    vararg custom: Any?\n) {\n    // required to store and assign the standard properties\n    super.insertNewUser(hostAddress, name, surname, email, language, response)\n    // value of the custom property\n    val currencyFromCustomArray = custom[0].toString()\n    // initialize and save the preference\n    initCurrency(\n        currency = currencyFromCustomArray\n    )\n}\n</code></pre> <p>The retrieval of custom properties from the custom parameter depends on how the custom parameters are shared externally  either using <code>*customParametersArray</code> or simply <code>customParametersArray</code>. When the first approach is used, you can call the  <code>extractsCustomValue</code> method to retrieve the parameters:</p> <pre><code>@RequiresSuperCall\noverride fun insertNewUser(\n    hostAddress: String,\n    userId: String,\n    userToken: String,\n    profilePic: String,\n    name: String,\n    surname: String,\n    email: String,\n    language: String,\n    vararg custom: Any?\n) {\n    // required to store and assign the standard properties\n    super.insertNewUser(hostAddress, name, surname, email, language, response)\n    // value of the custom property\n    val currencyFromCustomArray = custom.extractsCustomValue(\n        itemPosition = 0\n    )\n    // initialize and save the preference\n    initCurrency(\n        currency = currencyFromCustomArray\n    )\n}\n</code></pre> <p>This is required because, if the array is passed without the <code>*</code> spread operator, Kotlin treats it as a single element of  the <code>vararg</code>, effectively wrapping it inside another array and thus changing its dimension and the location of the custom parameters</p>"},{"location":"compose/APIs/EquinoxLocalUser/#initialize-the-user-with-a-custom-property","title":"Initialize the user with a custom property","text":"<p>To correctly initialize the local user with the custom property, the <code>initLocalUser</code> method must be overridden to retrieve, from the <code>localStoragePath</code>, the value of the custom property:</p> <pre><code>@RequiresSuperCall\noverride fun initLocalUser() {\n    // required to assign the standard properties\n    super.initLocalUser()\n    setPreference&lt;String&gt;( // or setNullSafePreference\n        key = CURRENCY_KEY,\n        prefInit = { currency -&gt;\n            this.currency = currency\n        }\n    )\n}\n</code></pre> <p>The only suggested way to correctly retrieve and initialize the properties with the retrieved values is using those two  methods because handle the decryption of the data when needed</p>"},{"location":"compose/APIs/EquinoxLocalUser/#recompose-on-changes","title":"Recompose on changes","text":"<p>By default, when a property value changes, the UI does not recompose because the properties are not wrapped in a <code>State</code>.</p> <p>To address this, you can define <code>observableKeys</code> when instantiating the local user and then observe them at runtime.  This is made possible by the <code>State-Store</code> pattern used to manage this behavior.</p>"},{"location":"compose/APIs/EquinoxLocalUser/#declare-the-observable-keys","title":"Declare the observable keys","text":"<p>Can be defined a set of keys related to the properties to observe as follows:</p> <pre><code>val localUser = EquinoxLocalUser(\n    localStoragePath = \"local store path\",\n    observableKeys = setOf(\"theme\")\n)\n</code></pre>"},{"location":"compose/APIs/EquinoxLocalUser/#observe-properties","title":"Observe properties","text":"<p>Observing a property the UI can recompose when its value changes, and it can be done as follows:</p> <pre><code>@Composable\nfun EquinoxAppTheme(\n    darkTheme: Boolean = resolveTheme(),\n    content: @Composable () -&gt; Unit,\n) {\n    val colorScheme = when {\n        darkTheme -&gt; darkScheme\n        else -&gt; lightScheme\n    }\n    MaterialTheme(\n        colorScheme = colorScheme,\n        content = content\n    )\n}\n\n@Composable\nprivate fun resolveTheme(): Boolean {\n    val localUserTheme by localUser.observe&lt;ApplicationTheme&gt;(\n        key = \"theme\"\n    )\n    return when(localUserTheme) {\n        Dark -&gt; true\n        Light -&gt; false\n        else -&gt; isSystemInDarkTheme()\n    }\n}\n</code></pre> <p>Every time the value of the <code>localUserTheme</code> changes the UI will recompose</p>"},{"location":"compose/APIs/EquinoxLocalUser/#sensitive-data","title":"Sensitive data","text":"<p><code>EquinoxLocalUser</code> API provides a way to safeguard the sensitive data and correctly use those data decrypted thankful to Kassaforte library</p>"},{"location":"compose/APIs/EquinoxLocalUser/#declare-the-sensitive-keys","title":"Declare the sensitive keys","text":"<p>Can be defined a set of keys related to the properties to consider as sensitive properties:</p>"},{"location":"compose/APIs/EquinoxLocalUser/#full-override","title":"Full override","text":"<p>By default, the properties considered sensitive are contained in the <code>DEFAULT_SENSITIVE_KEYS</code> set which contains the <code>host_address</code>, <code>id</code> and <code>token</code> keys</p> <p>A full override allows to not consider those properties as sensitive data</p> <pre><code>val localUser = EquinoxLocalUser(\n    localStoragePath = \"local store path\",\n    sensitiveKeys = setOf(\"custom_key_one\", \"custom_key_two\")\n)\n</code></pre> <p>Warning</p> <p>This type of override is discouraged due the sensitivity of the data considered sensitive by default</p>"},{"location":"compose/APIs/EquinoxLocalUser/#partial-override","title":"Partial override","text":"<p>This type of override allows to keep the <code>DEFAULT_SENSITIVE_KEYS</code> set and add custom keys of the properties to consider sensitive based on the context of the developing application:</p> <pre><code>val localUser = EquinoxLocalUser(\n    localStoragePath = \"local store path\",\n    sensitiveKeys = buildSet {\n        addAll(DEFAULT_SENSITIVE_KEYS) // keep default keys\n        add(CURRENCY_KEY) // add custom keys\n    }\n)\n</code></pre> <p>Danger</p> <p>Removing a property from the <code>sensitiveKeys</code> set once a release has been already published, will cause the incorrect  handling of the encryption and decryption of the preference indicated by that key, and it will cause an application crash. Pay attention when a similar scenario is to be handled</p>"},{"location":"compose/APIs/EquinoxScreens/","title":"EquinoxScreens","text":"<p>These APIs are used to create screens with lifecycle management similar to Android activities</p>"},{"location":"compose/APIs/EquinoxScreens/#lifecycle-handled-methods","title":"Lifecycle handled methods","text":"<ul> <li> <p>onInit invoked when the screen has been instantiated</p> </li> <li> <p>onCreate invoked when the screen has been created</p> </li> <li> <p>onStart invoked when the screen has been started</p> </li> <li> <p>onResume invoked when the screen has been resumed</p> </li> <li> <p>onPause invoked when the screen has been paused</p> </li> <li> <p>onStop invoked when the screen has been stopped</p> </li> <li> <p>onDestroy invoked when the screen has been destroyed</p> </li> <li> <p>onAny invoked when in the screen has occurred any of the possible events</p> </li> </ul>"},{"location":"compose/APIs/EquinoxScreens/#implementation","title":"Implementation","text":""},{"location":"compose/APIs/EquinoxScreens/#equinoxnomodelscreen","title":"EquinoxNoModelScreen","text":"<p>Create a concrete custom screen with custom specifications you need without having a support viewModel</p> <pre><code>class TestScreen : EquinoxNoModelScreen(\n    loggerEnabled = true, // whether the logger is enabled\n) {\n\n    init {\n        onInit()\n    }\n\n    // place the content to display in the screen\n    @Composable\n    override fun ArrangeScreenContent() {\n        Scaffold {\n            Column(\n                modifier = Modifier\n                    .fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.Center\n            ) {\n                Column(\n                    modifier = Modifier\n                        .fillMaxWidth()\n                ) {\n                    TextDivider(\n                        text = \"text\",\n                        textStyle = TextStyle(\n                            fontSize = 40.sp\n                        )\n                    )\n                }\n            }\n        }\n    }\n\n    override fun onInit() {\n        super.onInit()\n        // your on init logic\n    }\n\n    override fun onStart() {\n        super.onStart()\n        // your on start logic\n    }\n\n    override fun onStop() {\n        super.onStop()\n        // your on stop logic\n    }\n\n    // where the states of the screen can be collected or instantiated\n    @Composable\n    override fun CollectStates() {\n        // collect your states\n    }\n\n}\n</code></pre>"},{"location":"compose/APIs/EquinoxScreens/#equinoxscreen","title":"EquinoxScreen","text":"<p>Create a concrete custom screen with custom specifications you need and then create the related <code>viewModel</code>. In the lifecycle methods will be automatically handled the lifecycle of the Retriever attached to the viewModel, but you can override them and then implement your own logic</p> <pre><code>class TestScreen : EquinoxScreen&lt;TestViewModel&gt;( // specific the viewModel\n    loggerEnabled = true, // whether the logger is enabled\n    viewModel = TestViewModel(\n        snackbarHostState = SnackbarHostState()\n    ) // instantiate the viewModel\n) {\n\n    private lateinit var time: State&lt;String&gt;\n\n    init {\n        onInit()\n    }\n\n    // place the content to display in the screen\n    @Composable\n    override fun ArrangeScreenContent() {\n        Scaffold(\n            snackbarHost = { SnackbarHost(viewModel.snackbarHostState!!) }\n        ) {\n            Column(\n                modifier = Modifier\n                    .fillMaxSize(),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.Center\n            ) {\n                Column(\n                    modifier = Modifier\n                        .fillMaxWidth()\n                ) {\n                    TextDivider(\n                        text = time.value,\n                        textStyle = TextStyle(\n                            fontSize = 40.sp\n                        )\n                    )\n                }\n            }\n        }\n    }\n\n    override fun onInit() {\n        super.onInit()\n        // your on init logic\n    }\n\n    override fun onStart() {\n        super.onStart()\n\n        // this lifecycle event cannot be automatically managed because the refresh routine is custom\n        viewModel.refreshTime()\n    }\n\n    // where the states of the screen can be collected or instantiated\n    @Composable\n    override fun CollectStates() {\n        time = viewModel.time.collectAsState()\n    }\n\n}\n</code></pre>"},{"location":"compose/APIs/EquinoxScreens/#usage","title":"Usage","text":""},{"location":"compose/APIs/EquinoxScreens/#display-the-screen","title":"Display the screen","text":"<p>For example from the <code>App</code> function you can show the created screen as follows:</p> <pre><code>@Composable\nfun App() {\n    val screen = TestScreen()\n    screen.ShowContent()\n}\n</code></pre>"},{"location":"compose/APIs/EquinoxScreens/#avoid-multiple-instantiations","title":"Avoid multiple instantiations","text":"<p>To avoid instantiating a screen multiple times, you can use the following method to remember a screen instance across recompositions</p> <pre><code>@Composable\nfun App() {\n    val screen = equinoxScreen { TestScreen() }\n    screen.ShowContent()\n}\n</code></pre>"},{"location":"compose/APIs/EquinoxScreens/#additional-usage","title":"Additional usage","text":""},{"location":"compose/APIs/EquinoxScreens/#collectstatesafterloading-method","title":"CollectStatesAfterLoading method","text":"<p>You can use the <code>CollectStatesAfterLoading</code> method to collect states after a loading phase. This method can be invoked in an arbitrary way whenever needed. Next an example of its usage:</p> <pre><code>@Composable\noverride fun ArrangeScreenContent() {\n    LoadingItemUI(\n        loadingRoutine = {\n            // your loading routine\n        },\n        contentLoaded = {\n            // invoke this method\n            CollectStatesAfterLoading()\n            // rest of the content\n        }\n    )\n}\n\n// override and customize it with your logic\n@Composable\noverride fun CollectStatesAfterLoading() {\n    // initialize your states depending of the loaded value\n}\n</code></pre>"},{"location":"compose/APIs/EquinoxViewModel/","title":"EquinoxViewModel","text":"<p>This API is a wrapper around the Compose ViewModel. It provides a simple way to delegate user interactions, such as communicating with the backend or executing retrieval routines to update UI data from EquinoxScreens</p>"},{"location":"compose/APIs/EquinoxViewModel/#implementation","title":"Implementation","text":"<p>In this example will be created a custom viewmodel, extending the EquinoxViewModel, to retrieve data from backend in a background coroutine using the provided retrieve method</p> <pre><code>class TestViewModel : EquinoxViewModel() {\n\n    fun retrieveRoutine() {\n        retrieve(\n            currentContext = Test::class, // the current screen displayed \n            routine = {\n                // logic to retrieve data\n            }\n        )\n    }\n\n}\n</code></pre>"},{"location":"compose/APIs/EquinoxViewModel/#usage","title":"Usage","text":"<p>Create a related screen with attached the TestViewModel and use it as follows:</p> <pre><code>class Test : EquinoxScreen(\n    viewModel = TestViewModel()\n) {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        // some state to control the visibility of an element on screen\n        val show = remember { mutableStateOf(false) }\n        // an example composable linked to 'show' state\n        EquinoxAlertDialog(\n            show = show,\n            title = \"Any title\",\n            text = \"Any text\",\n            viewModel = viewModel, // passing the viewmodel allows the component to automatically suspend or restart the refresher\n            onDismissAction = {\n\n                // your code\n\n                show.value = false // the refresh routine will be restated\n            },\n            dismissText = \"Dismiss\",\n            confirmText = \"Confimer\",\n            confirmAction = {\n                // your code\n                show.value = false // the refresh routine will be restated\n            }\n        )\n        Button(\n            onClick = {\n                // your code\n                show.value = true // the refresh routine will be suspended\n            }\n        ) {\n            Text(\n                text = \"Show\"\n            )\n        }\n    }\n\n    override fun onStart() {\n        // start the retrieve routine\n        viewModel.retrieveRoutine()\n    }\n\n}\n</code></pre>"},{"location":"compose/APIs/EquinoxWindowKit/","title":"EquinoxWindowKit","text":"<p>These APIs are useful to handle the responsive layouts from specific components creation to assign specific value based on the current window-size-class</p>"},{"location":"compose/APIs/EquinoxWindowKit/#kit-composition","title":"Kit composition","text":""},{"location":"compose/APIs/EquinoxWindowKit/#responsive-classes","title":"Responsive classes","text":"Class Description <code>EXPANDED_CONTENT</code> Represents the content to be displayed on a device that belongs to an expanded width class and an expanded height class <code>EXPANDED_MEDIUM_CONTENT</code> Represents the content to be displayed on a device that belongs to an expanded width class and a medium height class <code>EXPANDED_COMPACT_CONTENT</code> Represents the content to be displayed on a device that belongs to an expanded width class and a compact height class <code>MEDIUM_CONTENT</code> Represents the content to be displayed on a device that belongs to a medium width class and a medium height class <code>MEDIUM_EXPANDED_CONTENT</code> Represents the content to be displayed on a device that belongs to a medium width class and an expanded height class <code>MEDIUM_COMPACT_CONTENT</code> Represents the content to be displayed on a device that belongs to a medium width class and a compact height class <code>COMPACT_CONTENT</code> Represents the content to be displayed on a device that belongs to a compact width class and a compact height class <code>COMPACT_EXPANDED_CONTENT</code> Represents the content to be displayed on a device that belongs to a compact width class and an expanded height class <code>COMPACT_MEDIUM_CONTENT</code> Represents the content to be displayed on a device that belongs to a compact width class and a medium height class"},{"location":"compose/APIs/EquinoxWindowKit/#annotations","title":"Annotations","text":"<ul> <li> <p>LayoutCoordinator useful to indicate the components which are just coordinator of the specific components designed   for the specific size classes</p> </li> <li> <p>ExpandedClassComponent useful to indicate the components which are shown on those devices which belong to the   <code>Expanded</code> class</p> </li> <li> <p>MediumClassComponent useful to indicate the components which are shown on those devices which belong to the   <code>Medium</code> class</p> </li> <li> <p>CompactClassComponent useful to indicate the components which are shown on those devices which belong to the   <code>Compact</code> class</p> </li> <li> <p>ResponsiveClassComponent useful to indicate the components which are shown on those devices which   belong to the specified classes. This annotation can include both the WindowWidthSizeClass and    WindowHeightSizeClass categorizations</p> </li> </ul>"},{"location":"compose/APIs/EquinoxWindowKit/#responsive-methods","title":"Responsive methods","text":"<ul> <li>ResponsiveContent used to display the correct content based on the   current ResponsiveClass</li> <li>responsiveAction used to execute an action based on the   current ResponsiveClass</li> <li>responsiveAssignment used to assigns a specific value based on the   current ResponsiveClass</li> </ul>"},{"location":"compose/APIs/EquinoxWindowKit/#usage","title":"Usage","text":""},{"location":"compose/APIs/EquinoxWindowKit/#responsive-content","title":"Responsive content","text":"<p>Using the <code>ResponsiveContent</code> method you can handle the different sizes of the screen where your application is running on:</p> <pre><code>@Composable\n@LayoutCoordinator\nfun App() {\n    ResponsiveContent(\n        onExpandedSizeClass = {\n            ExpandedContent()\n        },\n        onMediumSizeClass = {\n            MediumContent()\n        },\n        onCompactSizeClass = {\n            CompactContent()\n        }\n    )\n}\n\n@Composable\n@ExpandedClassComponent // not mandatory, but suggested for a better readability\nfun ExpandedContent() {\n    // specific content for the expanded screens\n}\n\n@Composable\n@MediumClassComponent // not mandatory, but suggested for a better readability\nfun MediumContent() {\n    // specific content for the medium screens\n}\n\n@Composable\n@CompactClassComponent // not mandatory, but suggested for a better readability\nfun CompactContent() {\n    // specific content for the compact screens\n}\n</code></pre>"},{"location":"compose/APIs/EquinoxWindowKit/#responsive-assignment","title":"Responsive assignment","text":"<p>Using the <code>responsiveAssignment</code> method you can assign a specific value based on the current screen size where your application is running on:</p> <pre><code>@Composable\nfun App() {\n    val text = responsiveAssignment(\n        onExpandedSizeClass = {\n            \"Hello Expanded World!\"\n        },\n        onMediumSizeClass = {\n            \"Hello Medium World!\"\n        },\n        onCompactSizeClass = {\n            \"Hello Compact World!\"\n        }\n    )\n    Text(\n        text = text\n    )\n}\n</code></pre>"},{"location":"compose/APIs/EquinoxWindowKit/#responsive-action","title":"Responsive action","text":"<p>Using the <code>responsiveAction</code> method you can execute specific (non @Composable) actions based on the current screen size where your application is running on</p> <pre><code>@Composable\nfun App() {\n    responsiveAction(\n        onExpandedSizeClass = {\n            println(\"Hello Expanded World!\")\n        },\n        onMediumSizeClass = {\n            println(\"Hello Medium World!\")\n        },\n        onCompactSizeClass = {\n            println(\"Hello Compact World!\")\n        }\n    )\n}\n</code></pre>"},{"location":"compose/Annotations/DestinationScreen/","title":"DestinationScreen","text":"<p>This annotation is useful to indicate which Equinox screen a navigation method reaches. Its purpose is to improve the readability of the code</p>"},{"location":"compose/Annotations/DestinationScreen/#usage","title":"Usage","text":"<pre><code>// Home extends EquinoxNoModelScreen\n@DestinationScreen(Home::class)\nfun navToHomeScreen() {\n    // your logic of the navigation method\n}\n</code></pre>"},{"location":"compose/Annotations/ScreenCoordinator/","title":"ScreenCoordinator","text":"<p>This annotation is useful to indicate a customization of an EquinoxNoModelScreen or EquinoxScreen that provides a basic behavior that all the screens must have, for example a screen of an application which has a specific layout architecture that all other screens of the application must have</p>"},{"location":"compose/Annotations/ScreenCoordinator/#usage","title":"Usage","text":"<pre><code>@ScreenCoordinator\nabstract class MyScreenApplication(\n    private val title: String\n) : EquinoxNoModelScreen() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column (\n            modifier = Modifier\n                .fillMaxSize()\n        ) {\n            Text(\n                text = title\n            )\n            MyCustomScreenContent()\n        }\n    }\n\n    @Composable\n    abstract fun ColumnScope.MyCustomScreenContent()\n\n}\n</code></pre>"},{"location":"compose/Annotations/ScreenSection/","title":"ScreenSection","text":"<p>This annotation is useful for indicating an inner section of an EquinoxNoModelScreen or EquinoxScreen</p>"},{"location":"compose/Annotations/ScreenSection/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Title()\n    }\n\n    @Composable\n    @ScreenSection(\n        description = \"\"\"\n            A not mandatory description about the purpose of the section\n        \"\"\"\n    )\n    private fun Title() {\n        // the content of the section\n    }\n\n}\n</code></pre>"},{"location":"compose/components/BadgesText/","title":"BadgesText","text":""},{"location":"compose/components/BadgesText/#classic","title":"Classic","text":"<p>This component allows to display a customizable badge in your UI. It is useful for showing labels, states or tags in a visually distinct way</p>"},{"location":"compose/components/BadgesText/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            BadgeText(\n                badgeText = \"MyBadge\",\n                badgeColor = MaterialTheme.colorScheme.primary\n            )\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/BadgesText/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>modifier</code> The <code>Modifier</code> to be applied to the component <code>shape</code> The shape of the badge <code>padding</code> The padding applied from the text to outside the badge <code>elevation</code> The elevation to apply to the badge <code>fontSize</code> The size of glyphs to use when painting the text. See <code>TextStyle.fontSize</code> <code>fontStyle</code> The typeface variant to use when drawing the letters (e.g., italic). See <code>TextStyle.fontStyle</code> <code>fontWeight</code> The typeface thickness to use when painting the text (e.g., <code>FontWeight.Bold</code>) <code>fontFamily</code> The font family to be used when rendering the text. See <code>TextStyle.fontFamily</code> <code>letterSpacing</code> The amount of space to add between each letter. See <code>TextStyle.letterSpacing</code> <code>textDecoration</code> The decorations to paint on the text (e.g., an underline). See <code>TextStyle.textDecoration</code> <code>lineHeight</code> Line height for the <code>Paragraph</code> in <code>TextUnit</code> unit, e.g. SP or EM. See <code>TextStyle.lineHeight</code> <code>softWrap</code> Whether the text should break at soft line breaks. If false, the glyphs in the text will be positioned as if there was unlimited horizontal space <code>onTextLayout</code> Callback that is executed when a new text layout is calculated. A <code>TextLayoutResult</code> object provided contains paragraph info, text size, baselines, and more. Useful for adding decorations or selection highlights around text. <code>badgeTextStyle</code> The style configuration for the text <code>textColor</code> The color of the text based on the current <code>badgeColor</code> <code>onClick</code> The callback to invoke when the badge is clicked"},{"location":"compose/components/BadgesText/#appearance","title":"Appearance","text":""},{"location":"compose/components/BadgesText/#mobile","title":"Mobile","text":""},{"location":"compose/components/BadgesText/#desktop-web","title":"Desktop &amp; Web","text":""},{"location":"compose/components/BadgesText/#outlined","title":"Outlined","text":"<p>This component allows to display a customizable badge in your UI similar to the classic badge. It is useful for showing labels, states or tags in a visually distinct way and giving an additional outlined effect</p>"},{"location":"compose/components/BadgesText/#usage_1","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            OutlinedBadgeText(\n                badgeText = \"MyBadge\",\n                color = MaterialTheme.colorScheme.primary\n            )\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/BadgesText/#customization_1","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>modifier</code> The <code>Modifier</code> to be applied to the component <code>borderWidth</code> The width of the border <code>shape</code> The shape of the badge <code>padding</code> The padding applied from the text to outside the badge <code>fontSize</code> The size of glyphs to use when painting the text. See <code>TextStyle.fontSize</code> <code>fontStyle</code> The typeface variant to use when drawing the letters (e.g., italic). See <code>TextStyle.fontStyle</code> <code>fontWeight</code> The typeface thickness to use when painting the text (e.g., <code>FontWeight.Bold</code>) <code>fontFamily</code> The font family to be used when rendering the text. See <code>TextStyle.fontFamily</code> <code>letterSpacing</code> The amount of space to add between each letter. See <code>TextStyle.letterSpacing</code> <code>textDecoration</code> The decorations to paint on the text (e.g., an underline). See <code>TextStyle.textDecoration</code> <code>lineHeight</code> Line height for the <code>Paragraph</code> in <code>TextUnit</code> unit, e.g. SP or EM. See <code>TextStyle.lineHeight</code> <code>softWrap</code> Whether the text should break at soft line breaks. If false, the glyphs in the text will be positioned as if there was unlimited horizontal space <code>onTextLayout</code> Callback that is executed when a new text layout is calculated. A <code>TextLayoutResult</code> object provided contains paragraph info, text size, baselines, and more. Useful for adding decorations or selection highlights around text. <code>badgeTextStyle</code> The style configuration for the text <code>color</code> The color to apply to the component, includes the border, background and text <code>alpha</code> The alpha to apply to give to the badge a translucent effect <code>badgeText</code> The text displayed on the badge <code>onClick</code> The callback to invoke when the badge is clicked"},{"location":"compose/components/BadgesText/#appearance_1","title":"Appearance","text":""},{"location":"compose/components/BadgesText/#mobile_1","title":"Mobile","text":""},{"location":"compose/components/BadgesText/#desktop-web_1","title":"Desktop &amp; Web","text":""},{"location":"compose/components/ChameleonText/","title":"ChameleonText","text":""},{"location":"compose/components/ChameleonText/#chameleontext","title":"ChameleonText","text":"<p>This component allows to change the text color dynamically based on the background of the container where the text is above</p>"},{"location":"compose/components/ChameleonText/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n\n        // dark background example color        \n        val backgroundColor = MaterialTheme.colorScheme.primary\n\n        // light background example color\n        val backgroundColor = MaterialTheme.colorScheme.surface\n\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .background(backgroundColor),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n\n            // with a painter\n            ChameleonText(\n                text = \"Your Text\",\n                backgroundPainter = painter // the painter value\n            )\n\n            // with an background image\n            ChameleonText(\n                text = \"Your Text\",\n                backgroundImage = backgroundImage // the image used as background\n            )\n\n            // with an hex color formar\n            ChameleonText(\n                text = \"Your Text\",\n                hexBackgroundColor = hexBackground // the hex color used as background\n            )\n\n            // with a color value\n            ChameleonText(\n                text = \"Your Text\",\n                backgroundColor = backgroundColor\n            )\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/ChameleonText/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>modifier</code> The <code>Modifier</code> to be applied to this layout node <code>fontSize</code> The size of glyphs to use when painting the text. See <code>TextStyle.fontSize</code> <code>fontStyle</code> The typeface variant to use when drawing the letters (e.g., italic). See <code>TextStyle.fontStyle</code> <code>fontWeight</code> The typeface thickness to use when painting the text (e.g., <code>FontWeight.Bold</code>) <code>fontFamily</code> The font family to be used when rendering the text. See <code>TextStyle.fontFamily</code> <code>letterSpacing</code> The amount of space to add between each letter. See <code>TextStyle.letterSpacing</code> <code>textDecoration</code> The decorations to paint on the text (e.g., an underline). See <code>TextStyle.textDecoration</code> <code>textAlign</code> The alignment of the text within the lines of the paragraph. See <code>TextStyle.textAlign</code> <code>lineHeight</code> Line height for the <code>Paragraph</code> in <code>TextUnit</code> unit, e.g. SP or EM. See <code>TextStyle.lineHeight</code> <code>overflow</code> How visual overflow should be handled <code>softWrap</code> Whether the text should break at soft line breaks. If false, the glyphs in the text will be positioned as if there was unlimited horizontal space. If <code>softWrap</code> is false, <code>overflow</code> and <code>TextAlign</code> may have unexpected effects <code>maxLines</code> An optional maximum number of lines for the text to span, wrapping if necessary. If the text exceeds the given number of lines, it will be truncated according to <code>overflow</code> and <code>softWrap</code>. It is required that <code>1 &lt;= minLines &lt;= maxLines</code> <code>minLines</code> The minimum height in terms of minimum number of visible lines. It is required that <code>1 &lt;= minLines &lt;= maxLines</code> <code>onTextLayout</code> Callback that is executed when a new text layout is calculated. A <code>TextLayoutResult</code> object provides paragraph information, size of the text, baselines and other details. Can be used to add decorations or functionality, e.g., selection highlights <code>style</code> Style configuration for the text such as color, font, line height, etc."},{"location":"compose/components/ChameleonText/#appearance","title":"Appearance","text":"<p>The screenshots are taken using the <code>backgroundColor</code> param component, but the results are the same using others <code>ChameleonText</code> components</p>"},{"location":"compose/components/ChameleonText/#mobile","title":"Mobile","text":"Dark background Light background"},{"location":"compose/components/ChameleonText/#desktop-web","title":"Desktop &amp; Web","text":""},{"location":"compose/components/ChameleonText/#dark-background","title":"Dark background","text":""},{"location":"compose/components/ChameleonText/#light-background","title":"Light background","text":""},{"location":"compose/components/DebouncedInputs/","title":"Debounced Inputs","text":""},{"location":"compose/components/DebouncedInputs/#debounced-inputs","title":"Debounced Inputs","text":"<p>These components allow to implement a debounce routine handled when the user stop to typing in the inputs fields</p>"},{"location":"compose/components/DebouncedInputs/#debouncedtextfield","title":"DebouncedTextField","text":""},{"location":"compose/components/DebouncedInputs/#usage","title":"Usage","text":"<pre><code>@Composable\nfun App() {\n    DebouncedTextField(\n        value = state,\n        placeholder = \"your_placeholder\",\n        debounceDelay = ,// custom delay default 500 ms\n        debounce = {\n            // your debounce logic here\n        }\n    )\n}\n</code></pre>"},{"location":"compose/components/DebouncedInputs/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>modifier</code> The modifier of the text field <code>textFieldStyle</code> The style to apply to the <code>TextField</code> <code>textFieldColors</code> The colors to use for the <code>TextField</code> <code>width</code> The width of the text field <code>mustBeInLowerCase</code> Whether the input must be in lower case format <code>allowsBlankSpaces</code> Whether the input can contain blank spaces or not <code>maxLines</code> The max number of lines supported. If different from one, the text field is considered as a text area; otherwise, a simple text field <code>validator</code> The function to invoke to validate the input <code>isError</code> Whether the text field is in an error state <code>debounceDelay</code> The delay before invoking the <code>debounce</code> <code>onValueChange</code> Callback triggered when the input service updates the text. An updated text comes as a parameter of the callback <code>label</code> The label displayed in the text field. The default text style for internal <code>Text</code> is <code>Typography.bodySmall</code> when focused, and <code>Typography.bodyLarge</code> when not focused <code>labelStyle</code> The style to apply to the label <code>placeholder</code> The placeholder displayed in the text field. Default text style for internal <code>Text</code> is <code>Typography.bodyLarge</code> <code>placeholderStyle</code> The style to apply to the placeholder <code>errorText</code> The error text to display if <code>isError</code> is true <code>errorTextStyle</code> The style to apply to the error text <code>keyboardOptions</code> Software keyboard options that contain configuration (e.g., <code>KeyboardType</code>, <code>ImeAction</code>) <code>keyboardActions</code> When the input service emits an IME action, the corresponding callback is called. This IME action may differ from the one specified in <code>KeyboardOptions.imeAction</code> <code>enabled</code> Controls the enabled state of this text field. When <code>false</code>, the component will not respond to input, will appear visually disabled, and will be inaccessible to accessibility services <code>readOnly</code> Controls the editable state of the text field. When <code>true</code>, the text field cannot be modified, but it can be focused and its text copied. Typically used for pre-filled forms that cannot be edited <code>leadingIcon</code> The optional leading icon to be displayed at the beginning of the text field container <code>trailingIcon</code> The optional trailing icon to be displayed at the end of the text field container <code>prefix</code> The optional prefix to be displayed before the input text in the text field <code>suffix</code> The optional suffix to be displayed after the input text in the text field <code>supportingText</code> The optional supporting text to be displayed below the text field <code>visualTransformation</code> Transforms the visual representation of the input <code>value</code>. For example, you can use <code>PasswordVisualTransformation</code> to create a password text field. By default, no transformation is applied <code>singleLine</code> When <code>true</code>, the text field becomes a single horizontally scrolling text field instead of wrapping multiple lines. Keyboard return key will not show as <code>ImeAction</code>. Ignores <code>maxLines</code> (set to 1 internally) <code>interactionSource</code> An optional hoisted <code>MutableInteractionSource</code> for observing and emitting <code>Interaction</code>s. Allows changing appearance or previewing different states. Defaults internally if <code>null</code> is provided <code>shape</code> Defines the shape of this text field's container"},{"location":"compose/components/DebouncedInputs/#debouncedoutlinedtextfield","title":"DebouncedOutlinedTextField","text":""},{"location":"compose/components/DebouncedInputs/#usage_1","title":"Usage","text":"<pre><code>@Composable\nfun App() {\n    DebouncedOutlinedTextField(\n        value = state,\n        placeholder = \"your_placeholder\",\n        debounceDelay = ,// custom delay default 500 ms\n        debounce = {\n            // your debounce logic here\n        }\n    )\n}\n</code></pre>"},{"location":"compose/components/DebouncedInputs/#customization_1","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>modifier</code> The modifier of the text field <code>outlinedTextFieldStyle</code> The style to apply to the <code>OutlinedTextField</code> <code>outlinedTextFieldColors</code> The colors to use for the <code>OutlinedTextField</code> <code>width</code> The width of the text field <code>mustBeInLowerCase</code> Whether the input must be in lower case format <code>allowsBlankSpaces</code> Whether the input can contain blank spaces or not <code>maxLines</code> The maximum number of lines supported. If &gt; 1, the text field is considered a text area; otherwise a simple one-line text field. It is required that <code>1 &lt;= minLines &lt;= maxLines</code> <code>minLines</code> The minimum number of visible lines. It is required that <code>1 &lt;= minLines &lt;= maxLines</code> <code>validator</code> The function to invoke to validate the input <code>isError</code> Whether the text field is in an error state. If true, the label, bottom indicator, and trailing icon will be displayed in error color <code>debounceDelay</code> The delay before invoking the <code>debounce</code> <code>onValueChange</code> Callback triggered when the input service updates the text. An updated text comes as a parameter of the callback <code>label</code> The optional label displayed inside the text field container. Default <code>Text</code> style is <code>Typography.bodySmall</code> when focused, and <code>Typography.bodyLarge</code> when not focused <code>labelStyle</code> The style to apply to the label <code>placeholder</code> The optional placeholder displayed when the field is in focus and input text is empty. Default <code>Text</code> style is <code>Typography.bodyLarge</code> <code>placeholderStyle</code> The style to apply to the placeholder <code>errorText</code> The error text to display if <code>isError</code> is true <code>errorTextStyle</code> The style to apply to the error text <code>leadingIcon</code> The optional leading icon displayed at the beginning of the text field container <code>trailingIcon</code> The optional trailing icon displayed at the end of the text field container <code>prefix</code> The optional prefix to be displayed before the input text <code>suffix</code> The optional suffix to be displayed after the input text <code>supportingText</code> The optional supporting text displayed below the text field <code>visualTransformation</code> Transforms the visual representation of the input <code>value</code>. For example, <code>PasswordVisualTransformation</code> can be used to create a password text field. By default, no transformation is applied <code>keyboardOptions</code> Software keyboard options that contain configuration such as <code>KeyboardType</code> and <code>ImeAction</code> <code>keyboardActions</code> When the input service emits an IME action, the corresponding callback is called. The IME action may differ from the one specified in <code>KeyboardOptions.imeAction</code> <code>enabled</code> Controls the enabled state of this text field. When <code>false</code>, the component will not respond to input, will appear visually disabled, and be inaccessible to accessibility services <code>readOnly</code> Controls the editable state of the text field. When <code>true</code>, the field cannot be modified, but it can be focused and its text copied. Typically used for pre-filled forms that cannot be edited <code>interactionSource</code> An optional hoisted <code>MutableInteractionSource</code> for observing and emitting <code>Interaction</code>s. Allows appearance changes or state previews. Defaults internally if <code>null</code> <code>shape</code> Defines the shape of this text field's border"},{"location":"compose/components/ExpandableText/","title":"ExpandableText","text":"<p>This component allows to dynamically display a long expanded text initially collapsed</p>"},{"location":"compose/components/ExpandableText/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        val longText = \"...\"\n        ExpandableText(\n            containerModifier = Modifier\n                .widthIn(\n                    max = 750.dp\n                ),\n            textModifier = Modifier\n                .padding(\n                    horizontal = 16.dp\n                ),\n            text = longText,\n            textStyle = TextStyle(\n                textAlign = TextAlign.Justify,\n            )\n        )\n    }\n\n}\n</code></pre>"},{"location":"compose/components/ExpandableText/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>containerModifier</code> The modifier to apply to the container <code>Column</code> <code>textModifier</code> The modifier to apply to the <code>Text</code> component <code>textStyle</code> The text style to customize the appearance of the text <code>maxLines</code> The maximum number of lines to display in collapsed mode <code>expandedMaxLines</code> The maximum number of lines to display in expanded mode <code>overflow</code> The behavior of the text in case of overflow <code>iconSize</code> The size of the icon indicator <code>expandedIcon</code> The icon displayed when the text is in expanded mode <code>collapsedIcon</code> The icon displayed when the text is in collapsed mode"},{"location":"compose/components/ExpandableText/#appearance","title":"Appearance","text":""},{"location":"compose/components/ExpandableText/#mobile","title":"Mobile","text":"Cannot play the video"},{"location":"compose/components/ExpandableText/#desktop-web","title":"Desktop &amp; Web","text":"Cannot play the video"},{"location":"compose/components/InformativeIcon/","title":"InformativeIcon","text":"<p>This component provides the possibility to display an informative text when the user interact with an icon</p>"},{"location":"compose/components/InformativeIcon/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxNoModelScreen() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            // standard icon\n            InformativeIcon(\n                imageVector = Icons.Default.Coffee,\n                infoText = \"Drink a coffee!\"\n            )\n\n            // customized icon\n            val cappuccinoColor = \"#9D7A5C\".toColor()\n            InformativeIcon(\n                imageVector = Icons.Default.Coffee,\n                size = 26.dp,\n                infoText = \"Drink a cappuccino!\",\n                infoTextColor = Color.LightGray,\n                infoTextBackgroundColor = Color.Gray,\n                tint = cappuccinoColor\n            )\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/InformativeIcon/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>modifier</code> The <code>Modifier</code> to be applied to this icon <code>infoTextColor</code> The color to apply to the <code>infoText</code> <code>infoTextBackgroundColor</code> The color to apply to the background of the <code>infoText</code> <code>size</code> The size of the icon <code>tint</code> The tint to be applied to <code>icon</code>. If <code>Color.Unspecified</code> is provided, then no tint is applied"},{"location":"compose/components/InformativeIcon/#appearance","title":"Appearance","text":""},{"location":"compose/components/InformativeIcon/#mobile","title":"Mobile","text":"Cannot play the video"},{"location":"compose/components/InformativeIcon/#desktop-web","title":"Desktop &amp; Web","text":"Cannot play the video"},{"location":"compose/components/ProgressBars/","title":"ProgressBars","text":"<p>These components allow to display progress values on bars</p>"},{"location":"compose/components/ProgressBars/#horizontalprogressbar","title":"HorizontalProgressBar","text":""},{"location":"compose/components/ProgressBars/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            // Your total value\n            val total = 10\n\n            // Arbitrary size to indicate the completion (width or height)\n            val completionSize = 150.dp\n\n            // any container\n            Card(\n                modifier = Modifier\n                    .width(150.dp)\n            ) {\n                var progress = remember { 0 }\n                HorizontalProgressBar(\n                    containerModifier = Modifier\n                        .padding(\n                            all = 10.dp\n                        ),\n                    completionWidth = completionSize,\n                    currentProgress = {\n                        // your logic to retrieve the progress value\n                        delay(1000)\n                        if (progress &lt; 10)\n                            ++progress\n                        else\n                            progress++\n                    },\n                    total = total,\n                    onCompletion = {\n                        // a not mandatory completion callback\n                        println(\"Completed!\")\n                    }\n                )\n            }\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/ProgressBars/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>containerModifier</code> The modifier to apply to the container <code>progressBarModifier</code> The modifier to apply to the progress line <code>lineColor</code> The color to apply to the progress line <code>cap</code> The style to apply to the extremity of the progress line <code>strokeWidth</code> The width of the stroke of the progress bar <code>onCompletion</code> Callback invoked when the <code>currentProgress</code> reaches the <code>total</code> value <code>progressIndicator</code> The content used to display the progress <code>animationSpec</code> Custom animations to apply to the progress line when it changes"},{"location":"compose/components/ProgressBars/#appearance","title":"Appearance","text":""},{"location":"compose/components/ProgressBars/#mobile","title":"Mobile","text":"Cannot play the video"},{"location":"compose/components/ProgressBars/#desktop-web","title":"Desktop &amp; Web","text":"Cannot play the video"},{"location":"compose/components/ProgressBars/#verticalprogressbar","title":"VerticalProgressBar","text":""},{"location":"compose/components/ProgressBars/#usage_1","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            // Your total value\n            val total = 10\n\n            // Arbitrary size to indicate the completion (width or height)\n            val completionSize = 150.dp\n\n            // any container\n            Card(\n                modifier = Modifier\n                    .width(150.dp)\n            ) {\n                var progress = remember { 0 }\n                VerticalProgressBar(\n                    containerModifier = Modifier\n                        .padding(\n                            all = 10.dp\n                        ),\n                    completionHeight = completionSize,\n                    currentProgress = {\n                        // your logic to retrieve the progress value\n                        delay(1000)\n                        if (progress &lt; 10)\n                            ++progress\n                        else\n                            progress++\n                    },\n                    total = total,\n                    onCompletion = {\n                        // a not mandatory completion callback\n                        println(\"Completed!\")\n                    }\n                )\n            }\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/ProgressBars/#customization_1","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>containerModifier</code> The modifier to apply to the container <code>progressBarModifier</code> The modifier to apply to the progress line <code>lineColor</code> The color to apply to the progress line <code>cap</code> The style to apply to the extremity of the progress line <code>strokeWidth</code> The width of the stroke of the progress bar <code>onCompletion</code> Callback invoked when the <code>currentProgress</code> reaches the <code>total</code> value <code>progressIndicator</code> The content used to display the progress <code>animationSpec</code> Custom animations to apply to the progress line when it changes"},{"location":"compose/components/ProgressBars/#appearance_1","title":"Appearance","text":""},{"location":"compose/components/ProgressBars/#mobile_1","title":"Mobile","text":"Cannot play the video"},{"location":"compose/components/ProgressBars/#desktop-web_1","title":"Desktop &amp; Web","text":"Cannot play the video"},{"location":"compose/components/QuantityPicker/","title":"QuantityPicker","text":"<p>This component allows to pick a numerical quantity value</p>"},{"location":"compose/components/QuantityPicker/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxNoModelScreen() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            val state = rememberQuantityPickerState(\n                initialQuantity = 0,\n                minQuantity = 0, // minimum threshold quantity allowed,\n                maxQuantity = 10, // maximum threshold quantity allowed,\n                longPressQuantity = 2,\n                /* quantity to decrement or increment when the user long press\n                           (or double-clicked) the quantity buttons */\n            )\n            QuantityPicker(\n                state = state,\n                informativeText = \"Informative text\", // not mandatory\n                decrementButtonColors = QuantityPickerDefaults.colors(\n                    ...\n            ), // customize the decrement button colors\n            incrementButtonColors = QuantityPickerDefaults.colors(\n                ...\n            ) // customize the increment button colors\n            )\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/QuantityPicker/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>modifier</code> The modifier to apply to the component <code>informativeText</code> The informative text which describes what type of quantity is picked <code>informativeTextStyle</code> The style to apply to the <code>informativeText</code> <code>indicatorsSize</code> The size of the indicators buttons must have <code>indicatorsShape</code> The shape of the indicators buttons must have <code>onQuantityPicked</code> Callback to invoke when a quantity has been picked <code>decrementButtonColors</code> The colors to apply to the decrement button <code>decrementIcon</code> The icon of the decrement button <code>quantityIndicatorStyle</code> The style to apply to the indicator text of the current quantity picked <code>incrementButtonColors</code> The colors to apply to the increment button <code>incrementIcon</code> The icon of the increment button <code>enabled</code> Whether the picker is enabled to pick quantities"},{"location":"compose/components/QuantityPicker/#appearance","title":"Appearance","text":""},{"location":"compose/components/QuantityPicker/#mobile","title":"Mobile","text":"Cannot play the video"},{"location":"compose/components/QuantityPicker/#desktop-web","title":"Desktop &amp; Web","text":"Cannot play the video"},{"location":"compose/components/SessionFlowContainer/","title":"SessionFlowContainer","text":"<p>This component allows to dynamically display the correct content based on the session status</p>"},{"location":"compose/components/SessionFlowContainer/#statuses","title":"Statuses","text":"Status Description <code>OPERATIONAL</code> The normal status of the session <code>SERVER_OFFLINE</code> The status of the session when the related server is offline <code>NO_NETWORK_CONNECTION</code> The status of the session when there is no network connection <code>USER_DISCONNECTED</code> The status of the session when the user has been disconnected <code>CUSTOM</code> Status that allows customizing the notification of error or any custom status as needed"},{"location":"compose/components/SessionFlowContainer/#usage","title":"Usage","text":""},{"location":"compose/components/SessionFlowContainer/#set-invokeonuserdisconnected-callback","title":"Set invokeOnUserDisconnected callback","text":"<p>You can set a custom callback to invoke when the user disconnected from the current session as follows:</p> <pre><code>@Composable\nfun App() {\n    SessionFlowState.invokeOnUserDisconnected {\n        // your custom logic to handle user disconnection\n    }\n}\n</code></pre>"},{"location":"compose/components/SessionFlowContainer/#workflow","title":"Workflow","text":"<p>In this example the architecture is an <code>EquinoxScreen</code> and its related <code>EquinoxViewModel</code></p>"},{"location":"compose/components/SessionFlowContainer/#testscreenviewmodel","title":"TestScreenViewModel","text":"<p>Create the viewmodel and the state used by the component</p> <pre><code>class TestScreenViewModel : EquinoxViewModel() {\n\n    // declare the state used by the component\n    lateinit var sessionFlowState: SessionFlowState\n\n    fun screenRoutine() {\n        // your custom routine (for the example will be forced the scenarios)\n        viewModelScope.launch {\n            delay(2000)\n\n            // notify the server is currently offline\n            sessionFlowState.notifyServerOffline()\n\n            delay(2000)\n            // notify the operational status of the session\n            sessionFlowState.notifyOperational()\n\n            // notify the user disconnection\n            sessionFlowState.notifyUserDisconnected() // will be invoked the callback you set\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/SessionFlowContainer/#testscreen","title":"TestScreen","text":"<p>Create the screen where the <code>SessionFlowContainer</code> will be displayed</p> <pre><code>class TestScreen : EquinoxScreen&lt;TestScreenViewModel&gt;(\n    viewModel = TestScreenViewModel()\n) {\n\n    /**\n     * Method used to arrange the content of the screen to display\n     */\n    @Composable\n    override fun ArrangeScreenContent() {\n        SessionFlowContainer(\n            modifier = Modifier\n                .fillMaxSize(),\n            state = viewModel.sessionFlowState,\n            content = {\n                // here you can display the main content to have in an operational status\n                Column(\n                    modifier = Modifier\n                        .fillMaxSize(),\n                    horizontalAlignment = Alignment.CenterHorizontally,\n                    verticalArrangement = Arrangement.Center\n                ) {\n                    Text(\n                        text = \"OPERATIONAL\",\n                        style = AppTypography.displayLarge\n                    )\n                }\n            }\n        )\n    }\n\n    // invoke the routine\n    override fun onStart() {\n        super.onStart()\n        viewModel.screenRoutine()\n    }\n\n    /**\n     * Method used to collect or instantiate the states of the screen\n     */\n    @Composable\n    override fun CollectStates() {\n        // here instantiate the state\n        viewModel.sessionFlowState = rememberSessionFlowState(\n            initialStatus = // assign a custom status\n        )\n    }\n\n}\n</code></pre>"},{"location":"compose/components/SessionFlowContainer/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Property Description <code>triggers</code> The triggers to use to automatically reinvoke the <code>loadingRoutine</code> <code>modifier</code> The modifier to apply to the component <code>viewModel</code> If passed, will be used to autonomously suspend and restart the Retriever's routine <code>onReconnection</code> An optional callback to invoke after the connection has been reestablished <code>enterTransition</code> The transition to apply when a new content is displayed <code>exitTransition</code> The transition to apply when a content is hidden <code>initialLoadingRoutineDelay</code> Delay to apply to the <code>loadingRoutine</code> before it starts <code>loadingRoutine</code> Routine used to load the elements displayed in the <code>content</code> <code>content</code> The main content displayed when the <code>SessionStatus</code> is <code>OPERATIONAL</code> <code>statusTextStyle</code> The style to apply to the texts of the callback contents <code>statusContainerColor</code> The color to apply to the background of the callback contents <code>loadingContentColor</code> The color to apply to the loading content <code>loadingIndicator</code> The indicator used during the <code>loadingRoutine</code> execution <code>fallbackContentColor</code> The color to apply to the fallback contents <code>retryFailedFlowContent</code> The content displayed to allow the user to retry a failed operation <code>onServerOffline</code> The content displayed when the <code>SessionStatus</code> is <code>SERVER_OFFLINE</code> <code>onCustomError</code> The content displayed when the <code>SessionStatus</code> is <code>CUSTOM</code> and related to the extra error value <code>onNoNetworkConnection</code> The content displayed when the <code>SessionStatus</code> is <code>NO_NETWORK_CONNECTION</code>"},{"location":"compose/components/SessionFlowContainer/#appearance","title":"Appearance","text":""},{"location":"compose/components/SessionFlowContainer/#mobile","title":"Mobile","text":"Cannot play the video"},{"location":"compose/components/SessionFlowContainer/#desktop-web","title":"Desktop &amp; Web","text":"Cannot play the video"},{"location":"compose/components/SplitText/","title":"SplitText","text":"<p>This component allows the user to insert a split text such OTP codes, PIN or any other texts of this type</p>"},{"location":"compose/components/SplitText/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            // create the dedicated state\n            val splitTextState = rememberSplitTextState(\n                splits = 6 // the number of the splits which compose the completed text\n            )\n\n            // create the related component\n            SplitText(\n                splitsTextState = splitTextState,\n                infoText = InfoText( // if omitted will not be displayed nothing\n                    text = \"Informative text\"\n                )\n            )\n\n            // assemble and get the completed text\n            Text(\n                text = splitTextState.getCompleteText()\n            )\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/SplitText/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Parameter Description <code>columnModifier</code> The modifier to apply to the <code>Column</code> container <code>rowModifier</code> The modifier to apply to the <code>LazyRow</code> container <code>spacingBetweenBoxes</code> The spacing between the boxes <code>boxShape</code> The shape to apply to the <code>SplitBox</code> <code>boxTextStyle</code> The text style to use for the <code>SplitBox</code>'s text <code>infoText</code> The informative text about what the component needs"},{"location":"compose/components/SplitText/#appearance","title":"Appearance","text":""},{"location":"compose/components/SplitText/#mobile","title":"Mobile","text":"Cannot play the video"},{"location":"compose/components/SplitText/#desktop-web","title":"Desktop &amp; Web","text":"Cannot play the video"},{"location":"compose/components/Stepper/","title":"Stepper","text":"<p>This component allows to create a dynamic interaction with the user dividing for example a long procedure such item creation, customization, etc... in different specific steps where the user can interact</p>"},{"location":"compose/components/Stepper/#usage","title":"Usage","text":""},{"location":"compose/components/Stepper/#create-the-steps","title":"Create the steps","text":"<p>It is suggested to create the steps-array inside the <code>remember</code> method to avoid the recreation during the recompositions</p> <pre><code>@Composable\nfun AnyComponent() {\n    val steps = remember {\n        arrayOf(\n            Step(\n                stepIcon = Icons.Default.Check, // representative icon\n                title = Res.string.check, // title of the step\n                content = {\n                    Check() // content of the step\n                }\n            ),\n            Step(\n                stepIcon = Icons.Default.Commit,\n                title = Res.string.commit,\n                content = {\n                    Commit()\n                }\n            ),\n            Step(\n                stepIcon = Icons.Default.Upload,\n                title = Res.string.push,\n                content = {\n                    Push()\n                },\n                dismissAction = {\n                    pushed.value = !pushed.value\n                }\n            )\n        )\n    }\n}\n</code></pre>"},{"location":"compose/components/Stepper/#customize-the-content-of-the-step","title":"Customize the content of the step","text":"<pre><code>@Composable\n//not mandatory, but it is better for readability\n@StepContent(\n    number = 0,\n    enabledWhen = \"This step is enabled when etc...\"\n)\nprivate fun Check() {\n    Row(\n        modifier = Modifier\n            .fillMaxWidth(),\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        Checkbox(\n            checked = checked.value,\n            onCheckedChange = { checked.value = it }\n        )\n        Text(\n            text = \"All code is okay\"\n        )\n    }\n}\n</code></pre>"},{"location":"compose/components/Stepper/#use-the-stepper","title":"Use the Stepper","text":"<pre><code>@Composable\nfun AnyComponent() {\n    // steps created\n    Stepper(\n        headerSection =  // custom header section\n        startStepShape =  // custom start shape\n        middleStepShape = // custom middle shape\n        finalStepShape = // custom final shape\n        confirmColor = // custom confirmation color\n        errorColor = // custom error color\n        stepBackgroundColor = // custom step background color\n        expandsStepIcon = // custom icon used to expand the steps\n        steps = steps\n    )\n}\n</code></pre>"},{"location":"compose/components/Stepper/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Parameter Description <code>containerModifier</code> The modifier to apply to the container <code>Column</code> <code>stepperModifier</code> The modifier to apply to the component <code>headerSection</code> A custom header of the stepper <code>startStepShape</code> The shape to apply to the first visible <code>Step</code> <code>middleStepShape</code> The shape to apply to those steps in the middle <code>finalStepShape</code> The shape to apply to the last visible <code>Step</code> <code>stepBackgroundColor</code> The color to use as background of the <code>Step</code> container <code>errorColor</code> The color used to indicate an error <code>confirmColor</code> The color used to confirm an action <code>expandsStepIcon</code> The icon used to expand each step"},{"location":"compose/components/Stepper/#appearance","title":"Appearance","text":""},{"location":"compose/components/Stepper/#mobile","title":"Mobile","text":"Cannot play the video"},{"location":"compose/components/Stepper/#desktop-web","title":"Desktop &amp; Web","text":"Cannot play the video"},{"location":"compose/components/TabSelector/","title":"TabSelector","text":"<p>Custom tab selector allows to select the tab to display</p>"},{"location":"compose/components/TabSelector/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n\n            // define your tabs\n            val tabs = listOf(\n                TabDetails(\n                    icon = Icons.Default.Home,\n                    tabTitle = \"Home\"\n                ),\n                TabDetails(\n                    icon = Icons.Default.Info,\n                    tabTitle = \"About\"\n                ),\n                TabDetails(\n                    icon = Icons.Default.Contacts,\n                    tabTitle = \"Contacts\"\n                )\n            )\n\n            // create the related state\n            val state = rememberTabSelectorState(\n                initialTabIndex = 0 // the default index value\n            )\n\n            // create the selector\n            TabSelector(\n                state = state,\n                tabs = tabs\n            ) { tab, index -&gt;\n\n                // the content of each tab\n                Column(\n                    modifier = Modifier\n                        .fillMaxSize(),\n                    horizontalAlignment = Alignment.CenterHorizontally,\n                    verticalArrangement = Arrangement.Center\n                ) {\n                    Text(\n                        text = tab.tabTitle\n                    )\n                }\n            }\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/TabSelector/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Parameter Description <code>modifier</code> The modifier to apply to the component <code>initialTabShape</code> The shape to use for the first tab of the selector <code>middleShape</code> The shape to use for the middle tabs of the selector <code>lastTabShape</code> The shape to use for the last tab of the selector <code>swipingEnabled</code> Whether the horizontal swiping gesture is enabled, if yes the <code>tabContent</code> will be displayed with the <code>HorizontalPager</code> component <code>tabContent</code> The content of the tab"},{"location":"compose/components/TabSelector/#appearance","title":"Appearance","text":""},{"location":"compose/components/TabSelector/#mobile","title":"Mobile","text":"Cannot play the video"},{"location":"compose/components/TabSelector/#desktop-web","title":"Desktop &amp; Web","text":"Cannot play the video"},{"location":"compose/components/TextDivider/","title":"TextDivider","text":"<p>This component allows to divide sections with a representative text</p>"},{"location":"compose/components/TextDivider/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            // create the components with the default settings\n            TextDivider(\n                text = \"Option 1\" // your text\n            )\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/TextDivider/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Parameter Description <code>containerModifier</code> The <code>Modifier</code> to apply to the container row <code>textModifier</code> The <code>Modifier</code> to apply to the text composable <code>fillMaxWidth</code> Whether the composable must occupy the entire horizontal space <code>thickness</code> Thickness of this divider line. Using <code>Dp.Hairline</code> will produce a single pixel divider regardless of screen density <code>dividerColor</code> The color of this divider line <code>textStyle</code> The style to apply to the <code>text</code>"},{"location":"compose/components/TextDivider/#appearance","title":"Appearance","text":""},{"location":"compose/components/TextDivider/#mobile","title":"Mobile","text":""},{"location":"compose/components/TextDivider/#desktop-web","title":"Desktop &amp; Web","text":""},{"location":"compose/components/Tile/","title":"Tile","text":"<p>This component allows users to quickly understand options and interact with them and can group related actions or information</p>"},{"location":"compose/components/Tile/#classic-tile","title":"Classic Tile","text":""},{"location":"compose/components/Tile/#usage","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            Tile(\n                icon = Icons.Default.Settings, // representative icon\n                text = \"Settings\", // representative text\n                contentColor = Color.White, // customize the content color\n                onClick = {\n                    // your action\n                }\n            )\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/Tile/#customization","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Parameter Description <code>modifier</code> The modifier to apply to the container <code>Card</code> <code>size</code> The size of the tile <code>shape</code> The shape of the tile <code>containerColor</code> The color scheme to apply to the tile <code>contentColor</code> The color of the content, icon, and the text <code>elevation</code> The elevation of the tile <code>iconSize</code> The size of the <code>icon</code> <code>fontWeight</code> The weight to apply to the <code>text</code> <code>textStyle</code> The style to apply to the <code>text</code>"},{"location":"compose/components/Tile/#appearance","title":"Appearance","text":""},{"location":"compose/components/Tile/#mobile","title":"Mobile","text":""},{"location":"compose/components/Tile/#desktop-web","title":"Desktop &amp; Web","text":""},{"location":"compose/components/Tile/#dashed-tile","title":"Dashed Tile","text":""},{"location":"compose/components/Tile/#usage_1","title":"Usage","text":"<pre><code>class TestScreen : EquinoxScreen&lt;EquinoxViewModel&gt;() {\n\n    @Composable\n    override fun ArrangeScreenContent() {\n        Column(\n            modifier = Modifier\n                .fillMaxSize(),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            DashedTile(\n                icon = Icons.Default.Settings, // representative icon\n                text = \"Settings\", // representative text\n                onClick = {\n                    // your action\n                }\n            )\n        }\n    }\n\n}\n</code></pre>"},{"location":"compose/components/Tile/#customization_1","title":"Customization","text":"<p>Check out the table below to apply your customizations to the component:</p> Parameter Description <code>modifier</code> The modifier to apply to the container <code>Card</code> <code>strokeWidth</code> The stroke width to apply as dashed effect <code>intervals</code> The number of the interval from each part of the line <code>phase</code> The pixel offset for the intervals <code>size</code> The size of the tile <code>cornerRadius</code> The radius of the tile <code>containerColor</code> The color scheme to apply to the tile <code>contentColor</code> The color of the content, icon, and the text <code>elevation</code> The elevation of the tile <code>iconSize</code> The size of the <code>icon</code> <code>fontWeight</code> The weight to apply to the <code>text</code> <code>textStyle</code> The style to apply to the <code>text</code>"},{"location":"compose/components/Tile/#appearance_1","title":"Appearance","text":""},{"location":"compose/components/Tile/#mobile_1","title":"Mobile","text":""},{"location":"compose/components/Tile/#desktop-web_1","title":"Desktop &amp; Web","text":""},{"location":"core/","title":"Overview","text":""},{"location":"core/#overview","title":"Overview","text":"<p>v1.1.6</p> <p> </p> <p>Core utilities for Compose Multiplatform and Spring technologies</p>"},{"location":"core/#implementation","title":"Implementation","text":""},{"location":"core/#version-catalog","title":"Version catalog","text":"<ul> <li><code>libs.version.toml</code></li> </ul> <pre><code>[versions]\nequinox = \"1.1.7\"\n\n[libraries]\nequinox-core = { module = \"io.github.n7ghtm4r3:equinox-core\", version.ref = \"equinox\" }\n</code></pre> <ul> <li><code>build.gradle.kts</code></li> </ul> <pre><code>dependencies {\n    implementation(libs.equinox.core)\n}\n</code></pre>"},{"location":"core/#gradle-kotlin","title":"Gradle (Kotlin)","text":"<pre><code>dependencies {\n    implementation(\"io.github.n7ghtm4r3:equinox-core:1.1.7\")\n}\n</code></pre>"},{"location":"core/#gradle-groovy","title":"Gradle Groovy","text":"<pre><code>dependencies {\n    implementation 'io.github.n7ghtm4r3:equinox-core:1.1.7'\n}\n</code></pre>"},{"location":"core/#apis-available","title":"APIs available","text":""},{"location":"core/#common","title":"Common","text":"<ul> <li> <p>Timeformatter   Allows to format the temporal values and calculate temporal gap</p> </li> <li> <p>Retriever   Allows to handle repetitive retrieval routines and execute them on background via coroutines</p> </li> <li> <p>Requester   Allows to send API requests with your clients providing the basic methods to build   your own customized requester following the Equinox's philosophy</p> </li> <li> <p>PaginatedResponse   Allows paginating backend responses making data retrieval easier for clients</p> </li> </ul>"},{"location":"core/#android","title":"Android","text":"<ul> <li> <p>AppContextInitializer   Initializes the <code>AppContext</code> during the application's startup phase using AndroidX's <code>Initializer</code> interface</p> </li> <li> <p>ContextActivityProvider   A singleton object that helps to maintain a weak reference to the current activity</p> </li> </ul>"},{"location":"core/#annotations-available","title":"Annotations available","text":"<p>This module provides a set of annotations that can be used to improve code readability and maintainability. You can explore them here</p>"},{"location":"core/APIs/android/AppContextInitializer/","title":"AppContextInitializer","text":"<p>Initializes the <code>AppContext</code> during the application's startup phase using AndroidX's <code>Initializer</code> interface.</p> <p>This class is responsible for setting up the <code>AppContext</code> by providing the application-wide <code>Context</code> early in the app's lifecycle. It is designed to work with AndroidX's <code>App Startup</code> library, which allows to initialize components as soon as the app starts, without having to modify the <code>Application</code> class</p>"},{"location":"core/APIs/android/AppContextInitializer/#implementation","title":"Implementation","text":"<ul> <li>Implement the official <code>androidx startup</code> library in your <code>build.gradle.kts</code> file (<code>android target</code>):</li> </ul> <pre><code>sourceSets {\n\n    androidMain.dependencies {\n        implementation(\"androidx.startup:startup-runtime:1.2.0\")\n    }\n\n}\n</code></pre> <ul> <li>Then declare the related <code>provider</code> in the <code>AndroidManifest</code> file</li> </ul> <pre><code>&lt;application&gt;\n\n    ...\n\n    &lt;provider\n            android:name=\"androidx.startup.InitializationProvider\"\n            android:authorities=\"${applicationId}.androidx-startup\"\n            android:exported=\"false\"\n            tools:node=\"merge\"&gt;\n        &lt;meta-data\n                android:name=\"com.tecknobit.equinoxcore.utilities.AppContextInitializer\"\n                android:value=\"androidx.startup\"/&gt;\n    &lt;/provider&gt;\n\n    ...\n\n&lt;/application&gt;\n</code></pre>"},{"location":"core/APIs/android/AppContextInitializer/#usage","title":"Usage","text":"<p>Use the application context initialized by the <code>AppContextInitializer</code> as follows:</p> <pre><code>actual fun someActualFun() {\n    val applicationContext = AppContext.get()\n}\n</code></pre>"},{"location":"core/APIs/android/ContextActivityProvider/","title":"ContextActivityProvider","text":"<p>A singleton object that helps to maintain a weak reference to the current activity, avoiding memory leaks by preventing strong references to an Activity</p>"},{"location":"core/APIs/android/ContextActivityProvider/#implementation","title":"Implementation","text":"<ul> <li>Initialize it in your <code>MainActivity.kt</code> class</li> </ul> <pre><code>class MainActivity : ComponentActivity() {\n\n    @CallSuper\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        ...\n        // attach the activity\n        ContextActivityProvider.setCurrentActivity(this)\n\n        ...\n    }\n\n}\n</code></pre>"},{"location":"core/APIs/android/ContextActivityProvider/#usage","title":"Usage","text":"<p>Use it in composable methods</p> <pre><code>@Composable\nfun SomeComposable() {\n    val activity = ContextActivityProvider.getCurrentActivity()\n}\n</code></pre>"},{"location":"core/APIs/common/JsonPrimitivesAdapter/","title":"JsonPrimitivesAdapter","text":"<p>These APIs allow to treat the content of a <code>Json.jsonPrimitive</code> as arbitrary type without handling the cast manually </p>"},{"location":"core/APIs/common/JsonPrimitivesAdapter/#usage","title":"Usage","text":""},{"location":"core/APIs/common/JsonPrimitivesAdapter/#supported-types","title":"Supported types","text":"Method Description <code>treatsAsBoolean</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>Boolean</code> <code>treatsAsNullableBoolean</code> Method used to treats a <code>JsonElement</code> value as nullable <code>Boolean</code> <code>treatsAsByte</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>Byte</code> <code>treatsAsNullableByte</code> Method used to treats a <code>JsonElement</code> value as nullable <code>Byte</code> <code>treatsAsUByte</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>UByte</code> <code>treatsAsNullableUByte</code> Method used to treats a <code>JsonElement</code> value as nullable <code>UByte</code> <code>treatsAsShort</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>Short</code> <code>treatsAsNullableShort</code> Method used to treats a <code>JsonElement</code> value as nullable <code>Short</code> <code>treatsAsUShort</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>UShort</code> <code>treatsAsNullableUShort</code> Method used to treats a <code>JsonElement</code> value as nullable <code>UShort</code> <code>treatsAsInt</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>Int</code> <code>treatsAsNullableInt</code> Method used to treats a <code>JsonElement</code> value as nullable <code>Int</code> <code>treatsAsUInt</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>UInt</code> <code>treatsAsNullableUInt</code> Method used to treats a <code>JsonElement</code> value as nullable <code>UInt</code> <code>treatsAsFloat</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>Float</code> <code>treatsAsNullableFloat</code> Method used to treats a <code>JsonElement</code> value as nullable <code>Float</code> <code>treatsAsDouble</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>Double</code> <code>treatsAsNullableDouble</code> Method used to treats a <code>JsonElement</code> value as nullable <code>Double</code> <code>treatsAsLong</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>Long</code> <code>treatsAsNullableLong</code> Method used to treats a <code>JsonElement</code> value as nullable <code>Long</code> <code>treatsAsULong</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>ULong</code> <code>treatsAsNullableULong</code> Method used to treats a <code>JsonElement</code> value as nullable <code>ULong</code> <code>treatsAsString</code> Method used to treats a <code>JsonElement</code> value as null-safe <code>String</code> <code>treatsAsNullableString</code> Method used to treats a <code>JsonElement</code> value as nullable <code>String</code>"},{"location":"core/APIs/common/JsonPrimitivesAdapter/#example","title":"Example","text":"<p>Following a comparison between not using the adapter and using it</p>"},{"location":"core/APIs/common/JsonPrimitivesAdapter/#sample","title":"Sample","text":"<pre><code>val dummyJson = \"\"\"\n    {\n        \"boolean_key\": true\n    }\n    \"\"\"\n</code></pre>"},{"location":"core/APIs/common/JsonPrimitivesAdapter/#without-adapter","title":"Without adapter","text":"<pre><code>val dummy = Json.decodeFromString&lt;JsonObject&gt;(\n    string = dummyJson\n)\n\nval dummyBoolean: Boolean = dummy.jsonObject[\"boolean_key\"]\n    ?.jsonPrimitive?.boolean ?: false\n\nprintln(dummyBoolean)\n</code></pre>"},{"location":"core/APIs/common/JsonPrimitivesAdapter/#with-adapter","title":"With adapter","text":"<pre><code>val dummy = Json.decodeFromString&lt;JsonObject&gt;(\n    string = dummyJson\n)\n\nval dummyBoolean: Boolean = dummy.jsonObject[\"boolean_key\"].treatsAsBoolean(\n    defValue = false\n)\n\nprintln(dummyBoolean)\n</code></pre>"},{"location":"core/APIs/common/PaginatedResponse/","title":"PaginatedResponse","text":"<p>This API allows the pagination of backend responses, making data retrieval easier for clients. It leverages the kotlinx serialization library to efficiently serialize data and enable flexible communication between client and server</p>"},{"location":"core/APIs/common/PaginatedResponse/#usage","title":"Usage","text":"<p>In this example will be shown a backend based on Spring Boot and a Compose Multiplatform client application which retrieves the data using a Requester</p>"},{"location":"core/APIs/common/PaginatedResponse/#backend-side","title":"Backend side","text":""},{"location":"core/APIs/common/PaginatedResponse/#creating-the-entity-class","title":"Creating the entity class","text":"<p>This class will be used by the backend to store the data related to the <code>Dummy</code> class, but will be used also to return  the paginated data</p> <pre><code>@Entity\npublic class Dummy extends EquinoxItem  {\n\n    @Column\n    private final String name;\n\n    public Dummy(String id, String name) {\n        super(id);\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n}\n</code></pre>"},{"location":"core/APIs/common/PaginatedResponse/#creating-the-service","title":"Creating the service","text":"<p>This is just an example of a possible service implementation, take a closer look just to the <code>getDummies</code> method</p> <pre><code>@Service\npublic class DummyService  {\n\n    @Autowired\n    private final DummiesRepository dummiesRepository;\n\n    public DummyService(DummiesRepository dummiesRepository) {\n        this.dummiesRepository = dummiesRepository;\n    }\n\n    public PaginatedResponse&lt;Dummy&gt; getDummies(int page, int pageSize) {\n\n        // count the total values\n        long total = dummiesRepository.count();\n\n        // create the pageable to use in the query\n        Pageable pageable = PageRequest.of(page, pageSize);\n\n        // a query example\n        List&lt;Dummy&gt; dummies = dummiesRepository.getDummies(pageable);\n\n        // return the paginated data\n        return new PaginatedResponse&lt;&gt;(\n                dummies,\n                page, // if not specified default is 0\n                pageSize, // if not specified default is 10\n                total\n        );\n\n    }\n\n}\n</code></pre> <p>The data retrieved from the database will be directly paginated for the requested list of Dummy, making it ready to be  read by the client through the same API</p>"},{"location":"core/APIs/common/PaginatedResponse/#client-side","title":"Client side","text":""},{"location":"core/APIs/common/PaginatedResponse/#kotlinx-serialization-implementation","title":"kotlinx-serialization implementation","text":"<p>To automatically serialize and then retrieve the data from the API, you have to implement the <code>kotlinx-serialization</code> library and the related plugin as follows:</p>"},{"location":"core/APIs/common/PaginatedResponse/#plugin","title":"Plugin","text":"<pre><code>plugins {\n    kotlin(\"plugin.serialization\") version \"latest-version\"\n}\n</code></pre>"},{"location":"core/APIs/common/PaginatedResponse/#library","title":"Library","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"org.jetbrains.kotlinx:kotlinx-serialization-json:latest-version\"\n}\n</code></pre> <p>Check out the official repository to find more information or the latest version available</p>"},{"location":"core/APIs/common/PaginatedResponse/#creating-the-data-class","title":"Creating the data class","text":"<p>This class will be used by the client to use the information retrieved from the backend</p> <pre><code>@Serializable // required annotation\ndata class Dummy(\n    val id: String,\n    val name: String\n)\n</code></pre>"},{"location":"core/APIs/common/PaginatedResponse/#usage_1","title":"Usage","text":"<p>Using, for example, a <code>Requester</code> instance we can request and then retrieve the paginated response of our  Dummy class as follows:</p> <pre><code>fun dummyRequest() {\n    viewModelScope.launch {\n        requester.sendPaginatedRequest(\n            request = {\n                getDummies(\n                    page = page, // if not specified default is 0\n                    page = pageSize, // if not specified default is 10\n                )\n            },\n            serialiazer = Dummy.serializer(), // required\n            onSuccess = { page -&gt;\n                // use the serialized page from the response\n                println(page.data) // list of paged Dummy\n            },\n            onFailure = {\n                // handle a failed request\n            },\n            onConnectionError = {\n                // handle a connection error\n            }\n        )\n    }\n}\n</code></pre>"},{"location":"core/APIs/common/Requester/","title":"Requester","text":"<p>This API allows to send API requests with your clients providing the basic methods to build your own customized requester following the Equinox's philosophy. It is based on top of Ktor to cover all the available platforms</p>"},{"location":"core/APIs/common/Requester/#implementation","title":"Implementation","text":"<p>Extending the <code>Requester</code> can be created a tailored instance to use following your requirements</p> <pre><code>class YourRequester(\n    host: String,\n    userId: String? = null,\n    userToken: String? = null,\n    connectionErrorMessage: String,\n    enableCertificatesValidation: Boolean = false\n): Requester( // extends the Requester to inherit the base methods\n    host = host,\n    userId = userId,\n    userToken = userToken,\n    connectionErrorMessage = connectionErrorMessage,\n    enableCertificatesValidation = enableCertificatesValidation\n) {\n\n    // add the posssibility to send a custom GET request\n    suspend fun sendYourRequest(): JsonObject {\n        return execGet(\n            endpoint = \"yourEndpoint\"\n        )\n    }\n\n}\n</code></pre>"},{"location":"core/APIs/common/Requester/#usage","title":"Usage","text":""},{"location":"core/APIs/common/Requester/#initialize-requester-instance","title":"Initialize Requester instance","text":"<pre><code>val requester = YourRequester(\n    host = \"host\",\n    userId = \"userId\", // null when for example user not logged in\n    userToken = \"userToken\", // null when for example user not logged in\n    connectionErrorMessage = \"connectionErrorMessage\",\n    enableCertificatesValidation = true / false\n)\n</code></pre>"},{"location":"core/APIs/common/Requester/#send-requests","title":"Send requests","text":"<p>To improve performance and follow best practices, the core request methods are marked as <code>suspend</code> by default, leaving  their execution to be handled with <code>coroutines</code> such <code>viewModelScope</code> or similar</p>"},{"location":"core/APIs/common/Requester/#normal-request","title":"Normal request","text":"<p>Send a normal request and handle its response as follows:</p> <pre><code>requester.sendRequest(\n    request = { sendYourRequest() },\n    onSuccess = {\n        // handle a successful request\n    },\n    onFailure = {\n        // handle a failed request\n    },\n    onConnectionError = {\n        // handle a connection error\n    }\n)\n</code></pre>"},{"location":"core/APIs/common/Requester/#paginated-request","title":"Paginated request","text":"<p>Leveraging the PaginatedResponse API the <code>Requester</code> allows to send a paginated request and format the  response according to the <code>PaginatedResponse</code> layout providing, when the request successful, an instance with the paginated data. This requires using the kotlinx library to correctly work.  The paginated request can be sent as follows:</p> <pre><code>requester.sendPaginatedRequest(\n    request = { sendYourPaginatedRequest() },\n    serialiazer = Home.serializer(), // required\n    onSuccess = { page -&gt;\n        // use the serialized page from the response\n        println(page.data) // list of paged data\n    },\n    onFailure = {\n        // handle a failed request\n    },\n    onConnectionError = {\n        // handle a connection error\n    }\n)\n</code></pre>"},{"location":"core/APIs/common/Retriever/","title":"Retriever","text":"<p>This API allows to handle repetitive retrieval routines and execute them on background via coroutines</p>"},{"location":"core/APIs/common/Retriever/#usage","title":"Usage","text":""},{"location":"core/APIs/common/Retriever/#use-directly-the-retriever","title":"Use directly the Retriever","text":"<pre><code>class ExampleClass {\n\n    private val retrieverScope = CoroutineScope(Dispatchers.Default)\n\n    private val retriever = Retriever(\n        retrieverScope = retrieverScope\n    )\n\n    fun example() {\n        retriever.execute(\n            currentContext = this::class,\n            routine = {\n                // your routine\n            },\n            repeatRoutine = repeatRoutine,\n            refreshDelay = delay\n        )\n    }\n\n    fun example1() {\n          retriever.suspend()\n    }\n\n}\n</code></pre>"},{"location":"core/APIs/common/Retriever/#use-the-wrapper-interface","title":"Use the wrapper interface","text":"<p>Creating a super class from which the other classes will be inheriting. This way is how the  EquinoxViewModel integrates <code>Retriever</code></p> <pre><code>abstract class AbstractClass : RetrieverWrapper {\n\n    protected val retrieverScope = CoroutineScope(Dispatchers.Default)\n\n    private val retriever = Retriever(\n        retrieverScope = retrieverScope\n    )\n\n    override fun canRetrieverStart(): Boolean {\n        return retriever.canStart()\n    }\n\n    override fun suspendRetriever() {\n        retriever.suspend()\n    }\n\n    override fun restartRetriever() {\n        retriever.restart()\n    }\n\n    override fun continueToRetrieve(\n        currentContext: Class&lt;*&gt;\n    ): Boolean {\n        return retriever.continueToRetrieve(currentContext)\n    }\n\n    override fun execRefreshingRoutine(\n        currentContext: Class&lt;*&gt;,\n        routine: () -&gt; Unit,\n        repeatRoutine: Boolean,\n        refreshDelay: Long\n    ) {\n        retriever.execute(\n            currentContext = currentContext,\n            routine = routine,\n            repeatRoutine = repeatRoutine,\n            refreshDelay = delay\n        ) \n    }\n}\n</code></pre> <p>Creating the inherit class example</p> <pre><code>class ExampleClass : AbstractClass() {\n\n    fun example() {\n        retrieve(\n            currentContext = this::class,\n            routine = {\n                // your routine\n            }\n        )\n    }\n\n    fun example1() {\n        suspendRetriever()\n    }\n\n}\n</code></pre>"},{"location":"core/APIs/common/Timeformatter/","title":"Timeformatter","text":"<p>This API handles temporal values and provides easy access to custom formats for display or further use</p>"},{"location":"core/APIs/common/Timeformatter/#usage","title":"Usage","text":""},{"location":"core/APIs/common/Timeformatter/#time-parsing","title":"Time parsing","text":""},{"location":"core/APIs/common/Timeformatter/#format-the-current-timestamp-value-as-string","title":"Format the current timestamp value as String","text":"KotlinJava <pre><code>val currentTimestamp = Timeformatter.formatNowAsString(\n    pattern = defaultPattern // custom pattern if needed\n)\n</code></pre> <pre><code>String currentTimestamp = TimeFormatter.formatNowAsString(\n    TimeFormatter.COMPLETE_EUROPEAN_DATE_PATTERN // default pattern\n);\n</code></pre>"},{"location":"core/APIs/common/Timeformatter/#format-a-long-date-value-as-string","title":"Format a long date value as String","text":"KotlinJava <pre><code>val january6 = 1736198062000.toDateString(\n    pattern = defaultPattern // custom pattern if needed\n) // will be 06/01/2025 21:14:22\n</code></pre> <pre><code>String january6 = TimeFormatter.toDateString(\n    1736198062000L,\n    null, // default invalid time Value\n    TimeFormatter.COMPLETE_EUROPEAN_DATE_PATTERN // default pattern\n);\n</code></pre>"},{"location":"core/APIs/common/Timeformatter/#format-a-string-date-value-as-long","title":"Format a string date value as Long","text":"KotlinJava <pre><code>val january6 = \"06/01/2025 21:14:22\".toTimestamp(\n    pattern = defaultPattern // custom pattern if needed\n) // will be 1736198062000\n</code></pre> <pre><code>long january6 = TimeFormatter.toTimestamp(\n    \"06/01/2025 21:14:22\",\n    null, // default invalid time Value\n    TimeFormatter.COMPLETE_EUROPEAN_DATE_PATTERN // default pattern\n); // will be 1736198062000\n</code></pre>"},{"location":"core/APIs/common/Timeformatter/#temporal-gap-calculation","title":"Temporal gap calculation","text":"<pre><code>// 6 January \nval january6 = 1736191911000L\n\n// 16 January \nval january16 = 1737055946000L\n\n// the days gap will be 10 days\nval daysGap = genuary6.daysUntil(\n    untilDate = genuary16\n)\n</code></pre>"},{"location":"core/APIs/common/Timeformatter/#supported-temporal-gap","title":"Supported temporal gap","text":"Type Description <code>nanoseconds</code> Nanoseconds between two dates <code>milliseconds</code> Milliseconds between two dates <code>seconds</code> Seconds between two dates <code>minutes</code> Minutes between two dates <code>hours</code> Hours between two dates <code>days</code> Days between two dates <code>weeks</code> Weeks between two dates <code>months</code> Months between two dates <code>quarters</code> Quarters between two dates <code>years</code> Years between two dates <code>centuries</code> Centuries between two dates"},{"location":"core/APIs/jvm/OSUtils/","title":"OSUtils","text":"<p>These APIs provide utility methods to retrieve information about the current operating system where the application is  running on </p>"},{"location":"core/APIs/jvm/OSUtils/#getapplicationroamingdatadirectorypath","title":"getApplicationRoamingDataDirectoryPath","text":""},{"location":"core/APIs/jvm/OSUtils/#description","title":"Description","text":"<p>Method used to get the <code>application roaming data</code> directory path</p> <p>The directory retrieved is:</p> <ul> <li>Windows: <code>%APPDATA%</code></li> <li>macOS: <code>~/Library/Application Support</code></li> <li>Linux: <code>$XDG_DATA_HOME</code> or <code>~/.local/share</code> as default</li> </ul>"},{"location":"core/APIs/jvm/OSUtils/#usage","title":"Usage","text":"<pre><code>val path: String = getApplicationRoamingDataDirectoryPath()\n\nprintln(path) // e.g %APPDATA%\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#getapplicationroamingdatadirectory","title":"getApplicationRoamingDataDirectory","text":""},{"location":"core/APIs/jvm/OSUtils/#description_1","title":"Description","text":"<p>Method used to get the <code>application roaming data</code> directory</p> <p>The directory retrieved is:</p> <ul> <li>Windows: <code>%APPDATA%</code></li> <li>macOS: <code>~/Library/Application Support</code></li> <li>Linux: <code>$XDG_DATA_HOME</code> or <code>~/.local/share</code> as default</li> </ul>"},{"location":"core/APIs/jvm/OSUtils/#usage_1","title":"Usage","text":"<pre><code>val directory: File = getApplicationRoamingDataDirectory()\n\nprintln(directory.name) // e.g %APPDATA%\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#getapplicationlocaldatadirectorypath","title":"getApplicationLocalDataDirectoryPath","text":""},{"location":"core/APIs/jvm/OSUtils/#description_2","title":"Description","text":"<p>Method used to get the <code>application local data</code> directory path</p> <p>The directory retrieved is:</p> <ul> <li>Windows: <code>%LOCALAPPDATA%</code></li> <li>macOS: <code>~/Library/Application Support</code></li> <li>Linux: <code>~/.local/share</code></li> </ul>"},{"location":"core/APIs/jvm/OSUtils/#usage_2","title":"Usage","text":"<pre><code>val path: String = getApplicationLocalDataDirectoryPath()\n\nprintln(path) // e.g %LOCALAPPDATA%\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#getapplicationlocaldatadirectory","title":"getApplicationLocalDataDirectory","text":""},{"location":"core/APIs/jvm/OSUtils/#description_3","title":"Description","text":"<p>Method used to get the <code>application local data</code> directory</p> <p>The directory retrieved is:</p> <ul> <li>Windows: <code>%LOCALAPPDATA%</code></li> <li>macOS: <code>~/Library/Application Support</code></li> <li>Linux: <code>~/.local/share</code></li> </ul>"},{"location":"core/APIs/jvm/OSUtils/#usage_3","title":"Usage","text":"<pre><code>val directory: File = getApplicationLocalDataDirectory()\n\nprintln(directory.name) // e.g %LOCALAPPDATA%\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#getconfigurationdirectorypath","title":"getConfigurationDirectoryPath","text":""},{"location":"core/APIs/jvm/OSUtils/#description_4","title":"Description","text":"<p>Method used to get the <code>configuration</code> directory path</p> <p>The directory retrieved is:</p> <ul> <li>Windows: <code>%APPDATA%</code></li> <li>macOS: <code>~/Library/Preferences</code></li> <li>Linux: <code>$XDG_CONFIG_HOME</code> or <code>~/.config</code> as default</li> </ul>"},{"location":"core/APIs/jvm/OSUtils/#usage_4","title":"Usage","text":"<pre><code>val path: String = getConfigurationDirectoryPath()\n\nprintln(path) // e.g %APPDATA%\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#getconfigurationdirectory","title":"getConfigurationDirectory","text":""},{"location":"core/APIs/jvm/OSUtils/#description_5","title":"Description","text":"<p>Method used to get the <code>configuration</code> directory</p> <p>The directory retrieved is:</p> <ul> <li>Windows: <code>%APPDATA%</code></li> <li>macOS: <code>~/Library/Preferences</code></li> <li>Linux: <code>$XDG_CONFIG_HOME</code> or <code>~/.config</code> as default</li> </ul>"},{"location":"core/APIs/jvm/OSUtils/#usage_5","title":"Usage","text":"<pre><code>val directory: File = getConfigurationDirectory()\n\nprintln(directory.name) // e.g %APPDATA%\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#getcachedirectorypath","title":"getCacheDirectoryPath","text":""},{"location":"core/APIs/jvm/OSUtils/#description_6","title":"Description","text":"<ul> <li>Method used to get the <code>cache</code> directory path</li> </ul> <p>The directory retrieved is:</p> <ul> <li>Windows: <code>%LOCALAPPDATA%\\Cache</code></li> <li>macOS: <code>~/Library/Caches</code></li> <li>Linux: <code>$XDG_CACHE_HOME</code> or <code>~/.cache</code> as default</li> </ul>"},{"location":"core/APIs/jvm/OSUtils/#usage_6","title":"Usage","text":"<pre><code>val path: String = getCacheDirectoryPath()\n\nprintln(path) // e.g %%LOCALAPPDATA%\\Cache%\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#getcachedirectory","title":"getCacheDirectory","text":""},{"location":"core/APIs/jvm/OSUtils/#description_7","title":"Description","text":"<ul> <li>Method used to get the <code>cache</code> directory</li> </ul> <p>The directory retrieved is:</p> <ul> <li>Windows: <code>%LOCALAPPDATA%\\Cache</code></li> <li>macOS: <code>~/Library/Caches</code></li> <li>Linux: <code>$XDG_CACHE_HOME</code> or <code>~/.cache</code> as default</li> </ul>"},{"location":"core/APIs/jvm/OSUtils/#usage_7","title":"Usage","text":"<pre><code>val directory: File = getCacheDirectory()\n\nprintln(directory.name) // e.g %LOCALAPPDATA%\\Cache`\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#gettempdirectorypath","title":"getTempDirectoryPath","text":""},{"location":"core/APIs/jvm/OSUtils/#description_8","title":"Description","text":"<ul> <li>Method used to get the <code>temp</code> directory path</li> </ul> <p>The directory retrieved is:</p> <ul> <li>Windows: <code>%USERPROFILE%\\AppData\\Local\\Temp</code></li> <li>macOS: <code>~/tmp</code></li> <li>Linux: <code>~/tmp</code></li> </ul>"},{"location":"core/APIs/jvm/OSUtils/#usage_8","title":"Usage","text":"<pre><code>val path: String = getTempDirectoryPath()\n\nprintln(path) // e.g %USERPROFILE%\\AppData\\Local\\Temp\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#gettempdirectory","title":"getTempDirectory","text":""},{"location":"core/APIs/jvm/OSUtils/#description_9","title":"Description","text":"<ul> <li>Method used to get the <code>temp</code> directory</li> </ul> <p>The directory retrieved is:</p> <ul> <li>Windows: <code>%USERPROFILE%\\AppData\\Local\\Temp</code></li> <li>macOS: <code>~/tmp</code></li> <li>Linux: <code>~/tmp</code></li> </ul>"},{"location":"core/APIs/jvm/OSUtils/#usage_9","title":"Usage","text":"<pre><code>val directory: File = getTempDirectory()\n\nprintln(directory.name) // e.g %USERPROFILE%\\AppData\\Local\\Temp%\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#whenisrunningon","title":"whenIsRunningOn","text":"<p>Utility method used to execute a specific callback for the operating system which the application is currently running on, for example:</p> <pre><code>whenIsRunningOn(\n    windows = {\n        println(\"Hi from Windows!\")\n    },\n    macOs = {\n        println(\"Hi from macOS!\")\n    },\n    linux = {\n        println(\"Hi from linux!\")\n    }\n)\n</code></pre>"},{"location":"core/APIs/jvm/OSUtils/#isrunningon","title":"isRunningOn","text":""},{"location":"core/APIs/jvm/OSUtils/#operatingsystem","title":"OperatingSystem","text":"OS Description WINDOWS All the operating systems which are part of the Windows's family MACOS All the operating systems which are part of the macOS's family LINUX All the distros which are part of the Linux's family"},{"location":"core/APIs/jvm/OSUtils/#usage_10","title":"Usage","text":"<p>Retrieves the operating system which the application is currently running on, for example:</p> <pre><code>val isWindows = isRunningOn() == WINDOWS\nif(isWindows) {\n    println(\"Hi from Windows!\")\n}\n</code></pre>"},{"location":"core/Annotations/Assembler/","title":"Assembler","text":"<p>This annotation is useful to indicate those methods used to assemble anything such payloads of the requests, queries of the requests, etc</p>"},{"location":"core/Annotations/Assembler/#usage","title":"Usage","text":"<pre><code>class CarsRequester : Requester() {\n\n    fun addCar(\n        // car data\n    ) {\n        val payload = assembleCarPayload()\n        // use payload\n    }\n\n    @Assembler\n    private fun assembleCarPayload(): JsonObject {\n        // return the assembled payload\n        return JsonObject()\n    }\n\n    fun addTyres(\n        // car data\n    ) {\n        val payload = assembleTyresPayload()\n        // use payload\n    }\n\n    @Assembler(\n        structure = \"\"\"\n        {\n            \"model\": \"model\",\n            \"size\": \"size\"\n        }\n        \"\"\"\n    )\n    private fun assembleTyresPayload(): JsonObject {\n        // return the assembled payload\n        return JsonObject()\n    }\n\n}\n</code></pre>"},{"location":"core/Annotations/CustomParametersOrder/","title":"CustomParametersOrder","text":"<p>This annotation is useful to manage the custom parameters order for a better readability of the code and to work with that parameters correctly</p>"},{"location":"core/Annotations/CustomParametersOrder/#usage","title":"Usage","text":"<p>For example the <code>insertNewUser</code> method of the EquinoxLocalUser</p> <pre><code>@CustomParametersOrder(\n    order = [\"currency\"]\n)\noverride fun insertNewUser(\n    hostAddress: String,\n    name: String,\n    surname: String,\n    email: String,\n    language: String,\n    response: JsonHelper,\n    vararg custom: Any\n) {\n    // required to store and assign the standard properties\n    super.insertNewUser(hostAddress, name, surname, email, language, response)\n    currency = custom.extractsCustomValue(\n        itemPosition = 0\n    )\n}\n</code></pre>"},{"location":"core/Annotations/DTO/","title":"DTO","text":"<p>This annotation is useful to indicate whether a class is used as Data Transfer Object</p>"},{"location":"core/Annotations/DTO/#usage","title":"Usage","text":"<pre><code>@DTO\ndata class SimpleClass(\n    val id: String\n)\n</code></pre>"},{"location":"core/Annotations/FutureEquinoxApi/","title":"FutureEquinoxApi","text":"<p>This annotation is useful to indicate an experimental api implemented in an external project outside <code>Equinox</code> that can be potentially implemented in the official library</p>"},{"location":"core/Annotations/FutureEquinoxApi/#usage","title":"Usage","text":"<pre><code>@FutureEquinoxApi(\n    protoBehavior = \"\"\"\n        At the moment the proto api behaves etc...\n    \"\"\" // text block suggested,\n    releaseVersion = \"1.0.9\",\n    additionalNotes = \"\"\"\n        - More customization\n        - Add more styles\n        - ...\n    \"\"\" // text block suggested\n)\nclass PotentialApi {\n    ... behavior\n}\n</code></pre>"},{"location":"core/Annotations/RequestPath/","title":"RequestPath","text":"<p>This annotation is used to make the request path, path parameters, query parameters, and body parameters more readable and easier to manage in API request methods. It supports multiple types of parameters including path, query, and body parameters, helping to organize the API request construction in a more structured and understandable way</p>"},{"location":"core/Annotations/RequestPath/#usage","title":"Usage","text":"<pre><code>class YourRequester(\n    host: String,\n    userId: String? = null,\n    userToken: String? = null,\n    connectionErrorMessage: String,\n    enableCertificatesValidation: Boolean = false\n): Requester( // extends the Requester to inherit the base methods\n    host = host,\n    userId = userId,\n    userToken = userToken,\n    connectionErrorMessage = connectionErrorMessage,\n    enableCertificatesValidation = enableCertificatesValidation\n) {\n\n    // add the posssibility to send a custom GET request\n    @RequestPath(\n        path = \"path_of_the_request\",\n        method = GET\n    )\n    suspend fun sendYourRequest(): JsonObject {\n        return execGet(\n            endpoint = \"yourEndpoint\"\n        )\n    }\n\n}\n</code></pre>"},{"location":"core/Annotations/RequiresDocumentation/","title":"RequiresDocumentation","text":"<p>This annotation is used to indicate that a snippet of code, or an entire section, still needs to be documented. This annotation serves as a reminder to complete the documentation before publishing or using the code</p>"},{"location":"core/Annotations/RequiresDocumentation/#usage","title":"Usage","text":"<pre><code>@RequiresDocumentation\nfun newApi() {\n     // code\n}\n\n\n@RequiresDocumentation(\n     additionalNotes = \"\"\"\n         In the documentation must be included the release version\n     \"\"\"\n)\nfun newApiVersion() {\n     // code\n}\n</code></pre>"},{"location":"core/Annotations/RequiresSuperCall/","title":"RequiresSuperCall","text":"<p>This annotation is useful to indicate that an inherited or an overridden method to work correctly and completely requires that also the original method is invoked like the @CallSuper annotation</p>"},{"location":"core/Annotations/RequiresSuperCall/#usage","title":"Usage","text":"<pre><code>open class Vehicle {\n\n    @RequiresSuperCall\n    open fun startEngine() { \n        // general logic to start the engine\n    }\n\n}\n\nclass Car : Vehicle() { \n\n    @RequiresSuperCall\n    override fun startEngine() {\n        super.startEngine() // required for a complete and correct logic\n        // Car specific logic to start engine\n    }\n\n}\n</code></pre>"},{"location":"core/Annotations/Returner/","title":"Returner","text":"<p>This annotation is used to mark methods that are responsible for formatting and returning data in a specified format.</p> <p>This annotation is typically applied to methods whose sole purpose is to transform input data into a formatted version  for use elsewhere in the application</p>"},{"location":"core/Annotations/Returner/#usage","title":"Usage","text":"<pre><code>@Returner\nfun convertToB(\n    a: A\n) : B {\n    val b // logic to convert a to b\n    return b\n}\n</code></pre>"},{"location":"core/Annotations/Structure/","title":"Structure","text":"<p>This annotation is applied to classes that define a general structure and behavior for a potential hierarchy, along with its subclasses. It marks classes that provide a common template or foundation, often used for sharing general properties and functionality across a set of related classes.</p> <p>This annotation is useful when creating base classes that represent common characteristics or behaviors which should be shared by subclasses. It signifies that the annotated class is intended to be part of an inheritance hierarchy where subclasses should follow a consistent structure and can override or extend its behavior.</p>"},{"location":"core/Annotations/Structure/#usage","title":"Usage","text":"<pre><code>@Structure\nopen class Vehicle {\n\n     val plate: String\n\n     val horsePower: Int\n\n}\n\nclass Car : Vehicle() {\n\n     val plate: String\n         get = // logic to retrieve the plate value\n\n     val horsePower: Int\n         get = // logic to retrieve the horse power value\n\n}\n</code></pre>"},{"location":"core/Annotations/Validator/","title":"Validator","text":"<p>This annotation is applied to those methods which are used to check the validity of an input, and it is useful to provide additional information about the annotated method such the validity case of the input checked</p>"},{"location":"core/Annotations/Validator/#usage","title":"Usage","text":"<pre><code>@Validator(\n    validWhen = \"The input is valid when is not null\" // not mandatory\n)\nfun inputValid(\n    input: Any?\n) : Boolean {\n    return input != null\n}\n</code></pre>"},{"location":"core/Annotations/Wrapper/","title":"Wrapper","text":"<p>This annotation is applied to those wrapper methods that wrap the main method, facilitating access to the latter by avoiding the need to pass some unnecessary arguments</p>"},{"location":"core/Annotations/Wrapper/#usage","title":"Usage","text":"<pre><code>// This method is an example wrapper method\n// In this case, the unnecessary argument is the `0`\n@Wrapper(wrapperOf = \"sum(double x, double y, int decimals)\")\nfun sum(\n    x: Double, \n    y: Double\n): Double {\n    return sum(x, y, 0)\n}\n\n// This method is an example wrapped method\n// In this case, the wrapped argument is `decimals`\nfun sum(\n    x: Double, \n    y: Double,\n    decimals: Int\n): Double {\n    return TradingTools.roundValue(x + y, decimals)\n}\n</code></pre>"},{"location":"miscellaneous/","title":"Overview","text":""},{"location":"miscellaneous/#overview","title":"Overview","text":"<p>A collection of external library integrations and extensions developed in accordance with the <code>Equinox</code> architecture</p>"},{"location":"miscellaneous/#modules-available","title":"Modules available","text":"<ul> <li>lazy-pagination-compose-ops</li> <li>navigation-compose-util</li> </ul>"},{"location":"miscellaneous/modules/lazy-pagination-compose-ops/","title":"lazy-pagination-compose-ops","text":""},{"location":"miscellaneous/modules/lazy-pagination-compose-ops/#lazy-pagination-compose-ops","title":"lazy-pagination-compose-ops","text":"<p>v1.0.1</p> <p>Integration of the lazy-pagination-compose library with the in-place operations </p>"},{"location":"miscellaneous/modules/lazy-pagination-compose-ops/#implementation","title":"Implementation","text":""},{"location":"miscellaneous/modules/lazy-pagination-compose-ops/#version-catalog","title":"Version catalog","text":"<ul> <li><code>libs.version.toml</code></li> </ul> <pre><code>[versions]\nlazyPaginationCompose = \"1.7.1\"\nlazyPaginationComposeOps = \"1.0.2\"\n\n[libraries]\nlazy-pagination-compose = { module = \"io.github.ahmad-hamwi:lazy-pagination-compose\", version.ref = \"lazyPaginationCompose\" }\nlazy-pagination-compose-ops = { module = \"io.github.n7ghtm4r3:equinoxmisc-lazy-pagination-compose-ops\", version.ref = \"lazyPaginationComposeOps\" }\n</code></pre> <ul> <li><code>build.gradle.kts</code></li> </ul> <pre><code>dependencies {\n    implementation(libs.lazy.pagination.compose)\n    implementation(libs.lazy.pagination.compose.ops)\n}\n</code></pre>"},{"location":"miscellaneous/modules/lazy-pagination-compose-ops/#gradle-kotlin","title":"Gradle (Kotlin)","text":"<pre><code>dependencies {\n    implementation(\"io.github.ahmad-hamwi:lazy-pagination-compose:1.7.1\")\n    implementation(\"io.github.n7ghtm4r3:equinoxmisc-lazy-pagination-compose-ops:1.0.2\")\n}\n</code></pre>"},{"location":"miscellaneous/modules/lazy-pagination-compose-ops/#gradle-groovy","title":"Gradle Groovy","text":"<pre><code>dependencies {\n    implementation 'io.github.ahmad-hamwi:lazy-pagination-compose:1.7.1'\n    implementation 'io.github.n7ghtm4r3:equinoxmisc-lazy-pagination-compose-ops:1.0.2'\n}\n</code></pre>"},{"location":"miscellaneous/modules/lazy-pagination-compose-ops/#usage","title":"Usage","text":"Method Description <code>addInPlace</code> Add in-place a new item to the current <code>PaginationState.allItems</code> list <code>addAllInPlace</code> Add in-place a collection of items to the current <code>PaginationState.allItems</code> list <code>removeInPlace</code> Remove in-place an item from the current <code>PaginationState.allItems</code> list <code>removeAllInPlace</code> Remove in-place a collection of items from the current <code>PaginationState.allItems</code> list <code>updateInPlace</code> Update in-place the current <code>PaginationState.allItems</code> list <code>retainAndAllInPlace</code> Split in two phases: first remove all the items from the current <code>PaginationState.allItems</code> that are not present in the <code>items</code> collection, then add all the items present in the same items collection but not in the main one. Duplicate values are considered as one element, so they will be merged <code>mergeIfNotContained</code> Merge items from the <code>items</code> collection that are not present in the <code>PaginationState.allItems</code>. Duplicate values are considered as one element, so they will be merged <code>toggle</code> Add in-place an item to the current <code>PaginationState.allItems</code> if it is not already contained, or remove it if already contained. Can be used to dynamically insert or remove an element from the collection, e.g., with checkbox selection or button clicking"},{"location":"miscellaneous/modules/navigation-compose-util/","title":"navigation-compose-util","text":""},{"location":"miscellaneous/modules/navigation-compose-util/#navigation-compose-util","title":"navigation-compose-util","text":"<p>v1.0.0</p> <p>Integration of the Navigation Compose library with some useful utilities to simplify the sharing of the data between the destinations during the navigation</p>"},{"location":"miscellaneous/modules/navigation-compose-util/#implementation","title":"Implementation","text":""},{"location":"miscellaneous/modules/navigation-compose-util/#version-catalog","title":"Version catalog","text":"<ul> <li><code>libs.version.toml</code></li> </ul> <pre><code>[versions]\nnavigationCompose = \"2.9.1\"\nnavigationComposeUtil = \"1.0.0\"\n\n[libraries]\nnavigation-compose = { module = \"org.jetbrains.androidx.navigation:navigation-compose\", version.ref = \"navigationCompose\" }\nnavigation-compose-util = { module = \"io.github.n7ghtm4r3:equinoxmisc-navigation-compose-util\", version.ref = \"navigationComposeUtil\" }\n</code></pre> <ul> <li><code>build.gradle.kts</code></li> </ul> <pre><code>dependencies {\n    implementation(libs.navigation.compose)\n    implementation(libs.navigation.compose.util)\n}\n</code></pre>"},{"location":"miscellaneous/modules/navigation-compose-util/#gradle-kotlin","title":"Gradle (Kotlin)","text":"<pre><code>dependencies {\n    implementation(\"org.jetbrains.androidx.navigation:navigation-compose:2.9.1\")\n    implementation(\"io.github.n7ghtm4r3:equinoxmisc-navigation-compose-util:1.0.0\")\n}\n</code></pre>"},{"location":"miscellaneous/modules/navigation-compose-util/#gradle-groovy","title":"Gradle Groovy","text":"<pre><code>dependencies {\n    implementation 'org.jetbrains.androidx.navigation:navigation-compose:2.9.1'\n    implementation 'io.github.n7ghtm4r3:equinoxmisc-navigation-compose-util:1.0.0'\n}\n</code></pre>"},{"location":"miscellaneous/modules/navigation-compose-util/#usage","title":"Usage","text":""},{"location":"miscellaneous/modules/navigation-compose-util/#navigating-with-data","title":"Navigating with data","text":"<p>With the <code>navWithData</code> method is possible to navigate to destinations and attach data that those destinations will use when  visible (on top of the stack)</p> <pre><code>val navigator: NavHostController // an instance of the NavHostController\n\n// attach data during the navigation\nnavigator.navWithData(\n    route = \"Home\",\n    data = buildMap {\n        put(\"selectedTabTitle\", \"Settings\")\n    }\n)\n</code></pre> <p>Note</p> <p>In this example the destination has the <code>String</code> type, but this method has been overloaded  with all the supported types by the original Jetbrains API such as <code>NavUri</code>, <code>NavDeepLinkRequest</code>, etc...</p>"},{"location":"miscellaneous/modules/navigation-compose-util/#retrieving-navigation-data","title":"Retrieving navigation data","text":"<p>The library provides two APIs to retrieve the navigation data attached to the current destination: <code>getDestinationNavData</code> and <code>getAllDestinationNavData</code></p>"},{"location":"miscellaneous/modules/navigation-compose-util/#getdestinationnavdata","title":"getDestinationNavData","text":"<pre><code>@Composable\nfun App() {\n    // an instance of the NavHostController\n    val navigator: NavHostController = rememberNavController()\n    NavHost(\n        navController = navigator,\n        startDestination = \"Splashscreen\"\n    ) {\n        composable(\n            route = \"Splashscreen\"\n        ) {\n            val splashscreen = equinoxScreen { Splashscreen() }\n            splashscreen.ShowContent()\n        }\n        composable(\n            route = \"Home\"\n        ) {\n            val selectedTabTitle: String? = navigator.getDestinationNavData(\n                key = \"selectedTabTitle\",\n                defaultValue = // custom value if no data has been shared with that key\n            )\n            val home = equinoxScreen() {\n                Home(\n                    selectedTabTitle = selectedTabTitle\n                )\n            }\n            home.ShowContent()\n        }\n    }\n}\n</code></pre>"},{"location":"miscellaneous/modules/navigation-compose-util/#getalldestinationnavdata","title":"getAllDestinationNavData","text":"<pre><code>@Composable\nfun App() {\n    // an instance of the NavHostController\n    val navigator: NavHostController = rememberNavController()\n    NavHost(\n        navController = navigator,\n        startDestination = \"Splashscreen\"\n    ) {\n        composable(\n            route = \"Splashscreen\"\n        ) {\n            val splashscreen = equinoxScreen { Splashscreen() }\n            splashscreen.ShowContent()\n        }\n        composable(\n            route = \"Home\"\n        ) {\n            val navData: Map&lt;String, Any?&gt; = navigator.getAllDestinationNavData()\n            // your logic to use the navData\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>The <code>all destination data</code> means just to the data shared with the visible destination</p>"},{"location":"miscellaneous/modules/navigation-compose-util/#removing-navigation-data","title":"Removing navigation data","text":"<p>The library provides two APIs to remove the navigation data attached to the last destination shown before the  <code>NavHostController</code> performed the <code>popBackStack</code>: <code>clearLastDestinationNavData</code> and <code>clearLastDestinationAllNavData</code></p> <p>Note</p> <p>Both of these methods must be invoked from the destination which navigated to the destination owner of the  data to clear, for example <code>Splashscreen</code> navigates to <code>Home</code>, the navigation data have to be cleaned from the  <code>Splashscreen</code> destination</p>"},{"location":"miscellaneous/modules/navigation-compose-util/#clearlastdestinationnavdata","title":"clearLastDestinationNavData","text":"<pre><code>@Composable\nfun App() {\n    // an instance of the NavHostController\n    val navigator: NavHostController = rememberNavController()\n    NavHost(\n        navController = navigator,\n        startDestination = \"Splashscreen\"\n    ) {\n        composable(\n            route = \"Splashscreen\"\n        ) {\n            LaunchedEffect(Unit) {\n                val removedItems = navigator.clearLastDestinationNavData(\n                    key_one, key_two\n                )\n                // will be removed just the data specified by the specified keys\n            }\n\n            val splashscreen = equinoxScreen { Splashscreen() }\n            splashscreen.ShowContent()\n        }\n        composable(\n            route = \"Home\"\n        ) {\n            // home content\n        }\n    }\n}\n</code></pre>"},{"location":"miscellaneous/modules/navigation-compose-util/#clearlastdestinationallnavdata","title":"clearLastDestinationAllNavData","text":"<pre><code>@Composable\nfun App() {\n    // an instance of the NavHostController\n    val navigator: NavHostController = rememberNavController()\n    NavHost(\n        navController = navigator,\n        startDestination = \"Splashscreen\"\n    ) {\n        composable(\n            route = \"Splashscreen\"\n        ) {\n\n            LaunchedEffect(Unit) {\n                val removedItems = navigator.clearLastDestinationAllNavData()\n                // will be removed all the navigation data attached to the destination\n            }\n\n            val splashscreen = equinoxScreen { Splashscreen() }\n            splashscreen.ShowContent()\n        }\n        composable(\n            route = \"Home\"\n        ) {\n            // home content\n        }\n    }\n}\n</code></pre>"},{"location":"navigation/","title":"Overview","text":""},{"location":"navigation/#overview","title":"Overview","text":"<p>v1.0.4</p> <p> </p> <p>Responsive navigation systems based on the EquinoxScreens APIs to handle the navigation in Compose Multiplatform applications</p>"},{"location":"navigation/#implementation","title":"Implementation","text":""},{"location":"navigation/#version-catalog","title":"Version catalog","text":"<ul> <li><code>libs.version.toml</code></li> </ul> <pre><code>[versions]\nequinox = \"1.1.7\"\nequinox-navigation = \"1.0.4\"\n\n[libraries]\nequinox-compose = { module = \"io.github.n7ghtm4r3:equinox-compose\", version.ref = \"equinox\" }\nequinox-core = { module = \"io.github.n7ghtm4r3:equinox-core\", version.ref = \"equinox\" }\nequinox-navigation = { module = \"io.github.n7ghtm4r3:equinox-navigation\", version.ref = \"equinox-navigation\" }\n</code></pre> <ul> <li><code>build.gradle.kts</code></li> </ul> <pre><code>dependencies {\n\n    // implement the compose utilities\n    implementation(libs.equinox.compose)\n\n    // implement the core utilities\n    implementation(libs.equinox.core)\n\n    // implement the navigation utilities\n    implementation(libs.equinox.navigation)\n}\n</code></pre>"},{"location":"navigation/#gradle-kotlin","title":"Gradle (Kotlin)","text":"<pre><code>dependencies {\n\n    // implement the compose utilities\n    implementation(\"io.github.n7ghtm4r3:equinox-compose:1.1.7\")\n\n    // implement the core utilities\n    implementation(\"io.github.n7ghtm4r3:equinox-core:1.1.7\")\n\n    // implement the navigation utilities\n    implementation(\"io.github.n7ghtm4r3:equinox-navigation:1.0.4\")\n}\n</code></pre>"},{"location":"navigation/#gradle-groovy","title":"Gradle Groovy","text":"<pre><code>dependencies {\n\n    // implement the compose utilities\n    implementation 'io.github.n7ghtm4r3:equinox-compose:1.1.7'\n\n    // implement the core utilities\n    implementation 'io.github.n7ghtm4r3:equinox-core:1.1.7'\n\n    // implement the navigation utilities\n    implementation 'io.github.n7ghtm4r3:equinox-navigation:1.0.4'\n}\n</code></pre>"},{"location":"navigation/#apis-available","title":"APIs available","text":"<ul> <li>NavigatorScreen    Built-in responsive navigation system fully customizable</li> </ul>"},{"location":"navigation/APIs/NavigatorScreen/","title":"NavigatorScreen","text":"<p>Built-in responsive navigation system fully customizable based on the EquinoxScreens APIs.  The <code>NavigatorScreen</code> follows the Template Method pattern to be flexible and fully customizable</p>"},{"location":"navigation/APIs/NavigatorScreen/#implementation","title":"Implementation","text":""},{"location":"navigation/APIs/NavigatorScreen/#select-the-navigatortab","title":"Select the NavigatorTab","text":"<p>Select properly the <code>NavigatorTab</code> the <code>NavigatorScreen</code> have to use:</p> <ul> <li><code>NavigationTab</code> for a simple navigation</li> <li><code>I18nNavigationTab</code> for an internationalized navigation</li> </ul>"},{"location":"navigation/APIs/NavigatorScreen/#out-of-the-box-implementation","title":"Out-of-the-box implementation","text":"<p>The example is valid for all the NavigatorTab(s) you selected, but for this example will be used the <code>NavigationTab</code>.</p>"},{"location":"navigation/APIs/NavigatorScreen/#declare-the-reachable-tabs","title":"Declare the reachable tabs","text":"<p>Overriding the <code>navigationTabs</code> method you can declare which tabs can be reached during the navigation</p> <pre><code>/**\n * Method used to retrieve the tabs to assign to the [tabs] array\n *\n * @return the tabs used by the [NavigatorScreen] as [Array] of [T]\n */\noverride fun navigationTabs(): Array&lt;NavigationTab&gt; {\n    // your tabs here\n    return arrayOf(\n        NavigationTab(\n            title = \"Screen A\",\n            icon = Icons.Default.Place,\n            contentDescription = \"The screen A\"\n        ),\n        NavigationTab(\n            title = \"Screen B\",\n            icon = Icons.Default.Queue,\n            contentDescription = \"The screen B\"\n        )\n    )\n}\n</code></pre>"},{"location":"navigation/APIs/NavigatorScreen/#display-each-tab","title":"Display each tab","text":"<p>Overriding the <code>tabContent</code> method you can display the content of each tab </p> <pre><code>/**\n * Method used to instantiate the related screen based on the current [activeNavigationTabIndex]\n *\n * @return the screen as [EquinoxNoModelScreen]\n */\noverride fun Int.tabContent(): EquinoxNoModelScreen {\n    // here you can insert the custom logic to retrieve the specific content for the tab to display\n    return when (this) {\n        0 -&gt; A() // your custom EquinoxNoModelScreen\n        else -&gt; B() // your custom EquinoxNoModelScreen\n    }\n}\n</code></pre>"},{"location":"navigation/APIs/NavigatorScreen/#invoke-the-navigation-system","title":"Invoke the navigation system","text":"<p>To display and to use the navigation system you can invoke the <code>NavigationContent</code> as follows:</p> <pre><code>/**\n * Method used to arrange the content of the screen to display\n */\n@Composable\noverride fun ArrangeScreenContent() {\n    // here you can set the theme for example or any custom logic\n\n    // invoke this component to display the navigation system\n    NavigationContent(\n        sideBarModifier =, // customize the modifier of the sidebar\n        sideBarWidth =,  // customize the width of the sidebar\n        bottomBarModifier =, // customize the modifier of the bottom bar\n        backgroundTab =, // customize the color of the background for the tabs\n    )\n}\n</code></pre>"},{"location":"navigation/APIs/NavigatorScreen/#overview","title":"Overview","text":"<p>General overview about how the implementation should look like</p> <pre><code>class HomeScreen : NavigatorScreen&lt;NavigationTab&gt;() {\n\n    /**\n     * Method used to arrange the content of the screen to display\n     */\n    @Composable\n    override fun ArrangeScreenContent() {\n        // here you can set the theme for example or any custom logic\n\n        // invoke this component to display the navigation system\n        NavigationContent(\n            sideBarModifier =, // customize the modifier of the sidebar\n            sideBarWidth =,  // customize the width of the sidebar\n            bottomBarModifier =, // customize the modifier of the bottom bar\n            backgroundTab =, // customize the color of the background for the tabs\n        )\n    }\n\n    /**\n     * Method used to retrieve the tabs to assign to the [tabs] array\n     *\n     * @return the tabs used by the [NavigatorScreen] as [Array] of [T]\n     */\n    override fun navigationTabs(): Array&lt;NavigationTab&gt; {\n        // your tabs here\n        return arrayOf(\n            NavigationTab(\n                title = \"Screen A\",\n                icon = Icons.Default.Place,\n                contentDescription = \"The screen A\"\n            ),\n            NavigationTab(\n                title = \"Screen B\",\n                icon = Icons.Default.Queue,\n                contentDescription = \"The screen B\"\n            )\n        )\n    }\n\n    /**\n     * Method used to instantiate the related screen based on the current [activeNavigationTabIndex]\n     *\n     * @return the screen as [EquinoxNoModelScreen]\n     */\n    override fun Int.tabContent(): EquinoxNoModelScreen {\n        // here you can insert the custom logic to retrieve the specific content for the tab to display\n        return when (this) {\n            0 -&gt; A() // your custom EquinoxNoModelScreen\n            else -&gt; B() // your custom EquinoxNoModelScreen\n        }\n    }\n\n}\n</code></pre>"},{"location":"navigation/APIs/NavigatorScreen/#customizing-behavior","title":"Customizing behavior","text":"<p>The structure is the same of the Out-of-the-box implementation, but you need to override the specific methods to apply the customizations</p>"},{"location":"navigation/APIs/NavigatorScreen/#add-custom-header-to-the-sidebar","title":"Add custom header to the sidebar","text":"<p>Overriding the <code>SideNavigationHeaderContent</code> method you can place a header content</p> <pre><code>class HomeScreen : NavigatorScreen&lt;NavigationTab&gt;() {\n\n    /**\n     * Custom header content to display on the [SideNavigationArrangement] bar\n     */\n    @Composable\n    @ResponsiveClassComponent(\n        classes = [EXPANDED_CONTENT, MEDIUM_CONTENT]\n    )\n    override fun SideNavigationHeaderContent() {\n        // your custom header content\n    }\n\n}\n</code></pre>"},{"location":"navigation/APIs/NavigatorScreen/#add-custom-footer-to-the-sidebar","title":"Add custom footer to the sidebar","text":"<p>Overriding the <code>SideNavigationHeaderContent</code> method you can place a footer content</p> <pre><code>class HomeScreen : NavigatorScreen&lt;NavigationTab&gt;() {\n\n    /**\n     * Custom footer content to display on the [SideNavigationArrangement] bar\n     */\n    @Composable\n    @ResponsiveClassComponent(\n        classes = [EXPANDED_CONTENT, MEDIUM_CONTENT]\n    )\n    override fun SideNavigationFooterContent() {\n        // your custom footer content\n    }\n\n}\n</code></pre>"},{"location":"navigation/APIs/NavigatorScreen/#customize-the-sidebar-navigation-item","title":"Customize the sidebar navigation item","text":"<p>Overriding the <code>SideNavigationItem</code> method you can customize the navigation item displayed on the sidebar</p> <pre><code>class HomeScreen : NavigatorScreen&lt;NavigationTab&gt;() {\n\n    /**\n     * The navigation item of the [SideNavigationArrangement] bar\n     *\n     * @param index The index related to the item in the [tabs] array\n     * @param tab The related tab of the [index]\n     */\n    @Composable\n    @ResponsiveClassComponent(\n        classes = [EXPANDED_CONTENT, MEDIUM_CONTENT]\n    )\n    override fun SideNavigationItem(\n        index: Int,\n        tab: NavigationTab,\n    ) {\n        // custom sidebar navigation item here\n    }\n\n}\n</code></pre>"},{"location":"navigation/APIs/NavigatorScreen/#customize-the-bottom-bar-navigation-item","title":"Customize the bottom bar navigation item","text":"<p>Overriding the <code>BottomNavigationItem</code> method you can customize the navigation item displayed on the bottom bar</p> <pre><code>class HomeScreen : NavigatorScreen&lt;NavigationTab&gt;() {\n\n    /**\n     * The navigation item of the [BottomNavigationItem] bar\n     *\n     * @param index The index related to the item in the [tabs] array\n     * @param tab The related tab of the [index]\n     */\n    @Composable\n    @ResponsiveClassComponent(\n        classes = [MEDIUM_EXPANDED_CONTENT, COMPACT_CONTENT]\n    )\n    override fun RowScope.BottomNavigationItem(\n        index: Int,\n        tab: NavigationTab,\n    ) {\n        // custom bottom bar navigation item here\n    }\n\n}\n</code></pre>"},{"location":"navigation/APIs/NavigatorScreen/#usage","title":"Usage","text":"<p>For example from the <code>App</code> function you can display the screen created before:</p> <pre><code>@Composable\nfun App() {\n    val home = equinoxScreen { HomeScreen() }\n    home.ShowContent()\n}\n</code></pre>"}]}